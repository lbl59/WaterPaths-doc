<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="QuadProg_09_09_8cpp" kind="file" language="C++">
    <compoundname>QuadProg++.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes refid="QuadProg_09_09_8h" local="yes">QuadProg++.h</includes>
    <incdepgraph>
      <node id="3614">
        <label>iomanip</label>
      </node>
      <node id="3615">
        <label>cmath</label>
      </node>
      <node id="3613">
        <label>stdexcept</label>
      </node>
      <node id="3606">
        <label>src/Utils/QPSolver/QuadProg++.cpp</label>
        <link refid="QuadProg_09_09_8cpp"/>
        <childnode refid="3607" relation="include">
        </childnode>
        <childnode refid="3608" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3610" relation="include">
        </childnode>
      </node>
      <node id="3609">
        <label>sstream</label>
      </node>
      <node id="3616">
        <label>cstdlib</label>
      </node>
      <node id="3607">
        <label>iostream</label>
      </node>
      <node id="3611">
        <label>Array.h</label>
        <link refid="Array_8h"/>
        <childnode refid="3612" relation="include">
        </childnode>
        <childnode refid="3613" relation="include">
        </childnode>
        <childnode refid="3607" relation="include">
        </childnode>
        <childnode refid="3614" relation="include">
        </childnode>
        <childnode refid="3615" relation="include">
        </childnode>
        <childnode refid="3616" relation="include">
        </childnode>
      </node>
      <node id="3612">
        <label>set</label>
      </node>
      <node id="3608">
        <label>algorithm</label>
      </node>
      <node id="3610">
        <label>QuadProg++.h</label>
        <link refid="QuadProg_09_09_8h"/>
        <childnode refid="3611" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a245b4ca230c9916c941d5952b463fb37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void compute_d</definition>
        <argsstring>(Vector&lt; double &gt; &amp;d, const Matrix&lt; double &gt; &amp;J, const Vector&lt; double &gt; &amp;np)</argsstring>
        <name>compute_d</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>J</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="21" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="509" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1aec25929c6144281a8f2c77c2f5f7a02c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void update_z</definition>
        <argsstring>(Vector&lt; double &gt; &amp;z, const Matrix&lt; double &gt; &amp;J, const Vector&lt; double &gt; &amp;d, int iq)</argsstring>
        <name>update_z</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>J</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="23" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="522" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a707f6f999edbd59543ddd72371dea2ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void update_r</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;R, Vector&lt; double &gt; &amp;r, const Vector&lt; double &gt; &amp;d, int iq)</argsstring>
        <name>update_r</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="25" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="533" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a1c3319a116ecd20d13c2c9cf30062c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool add_constraint</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;R, Matrix&lt; double &gt; &amp;J, Vector&lt; double &gt; &amp;d, int &amp;iq, double &amp;rnorm)</argsstring>
        <name>add_constraint</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>J</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rnorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="27" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="546" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delete_constraint</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;R, Matrix&lt; double &gt; &amp;J, Vector&lt; int &gt; &amp;A, Vector&lt; double &gt; &amp;u, int n, int p, int &amp;iq, int l)</argsstring>
        <name>delete_constraint</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>J</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="29" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="611" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a2761596054f3b85f7758f4832ed11ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cholesky_decomposition</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;A)</argsstring>
        <name>cholesky_decomposition</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="34" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="706" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a546f5c5596dddb3f6a3538503de4965d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cholesky_solve</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;L, Vector&lt; double &gt; &amp;x, const Vector&lt; double &gt; &amp;b)</argsstring>
        <name>cholesky_solve</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="36" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="732" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a32ae2c99b85807ba20286c1a5c161a26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void forward_elimination</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;L, Vector&lt; double &gt; &amp;y, const Vector&lt; double &gt; &amp;b)</argsstring>
        <name>forward_elimination</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="38" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="742" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1af5e0bdb3a846d9de3ee74a9a8c8c1934" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void backward_elimination</definition>
        <argsstring>(const Matrix&lt; double &gt; &amp;U, Vector&lt; double &gt; &amp;x, const Vector&lt; double &gt; &amp;y)</argsstring>
        <name>backward_elimination</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="40" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="754" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double scalar_product</definition>
        <argsstring>(const Vector&lt; double &gt; &amp;x, const Vector&lt; double &gt; &amp;y)</argsstring>
        <name>scalar_product</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="44" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="696" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1ae73d813670287effead12dc193c041b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double distance</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>distance</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="46" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="681" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a4da9671c990051588cdaf629eeab3f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double solve_quadprog</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;G, Vector&lt; double &gt; &amp;g0, const Matrix&lt; double &gt; &amp;CE, const Vector&lt; double &gt; &amp;ce0, const Matrix&lt; double &gt; &amp;CI, const Vector&lt; double &gt; &amp;ci0, Vector&lt; double &gt; &amp;x)</argsstring>
        <name>solve_quadprog</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>g0</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>CE</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>ce0</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>CI</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>ci0</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="49" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="49" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a769f3a6ed2afed301b8067d8972c7aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void solve_quadprog_matlab_syntax</definition>
        <argsstring>(Matrix&lt; double &gt; &amp;G, Vector&lt; double &gt; &amp;g0, const Matrix&lt; double &gt; &amp;CE, const Vector&lt; double &gt; &amp;ce0, const Matrix&lt; double &gt; &amp;CI, const Vector&lt; double &gt; &amp;ci0, const Vector&lt; double &gt; &amp;lb, const Vector&lt; double &gt; &amp;ub, Vector&lt; double &gt; &amp;x)</argsstring>
        <name>solve_quadprog_matlab_syntax</name>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>g0</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>CE</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>ce0</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>CI</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>ci0</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>lb</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>ub</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper for Matlab quadprog input format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g0</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CE</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ce0</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CI</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ci0</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lb</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ub</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>Transpose CE.</para><para>Reverse signs of ce0 and ci0.</para><para>Expand ci0 to include the bounds.</para><para>Expand CI so to include the bounds.</para><para>Including bounds in expanded_CI and ci_inv</para><para>Transpose expanded_CI </para>        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="437" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="437" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_matrix</definition>
        <argsstring>(char *name, const Matrix&lt; double &gt; &amp;A, int n, int m)</argsstring>
        <name>print_matrix</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="766" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="766" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_vector</definition>
        <argsstring>(char *name, const Vector&lt; double &gt; &amp;v, int n)</argsstring>
        <name>print_vector</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; double &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Utils/QPSolver/QuadProg++.cpp" line="787" column="1" bodyfile="src/Utils/QPSolver/QuadProg++.cpp" bodystart="787" bodyend="801"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment">File<sp/>$Id:<sp/>QuadProg++.cc<sp/>232<sp/>2007-06-21<sp/>12:29:00Z<sp/>digasper<sp/>$</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Author:<sp/>Luca<sp/>Di<sp/>Gaspero</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>DIEGM<sp/>-<sp/>University<sp/>of<sp/>Udine,<sp/>Italy</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>luca.digaspero@uniud.it</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>http://www.diegm.uniud.it/digaspero/</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>This<sp/>software<sp/>may<sp/>be<sp/>modified<sp/>and<sp/>distributed<sp/>under<sp/>the<sp/>terms</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/><sp/>See<sp/>the<sp/>LICENSE<sp/>file<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>Modified<sp/>by<sp/>Bernardo<sp/>Trindade<sp/>on<sp/>04/2017</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="QuadProg_09_09_8h" kindref="compound">QuadProg++.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>for<sp/>updating<sp/>some<sp/>data<sp/>needed<sp/>by<sp/>the<sp/>solution<sp/>method<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a245b4ca230c9916c941d5952b463fb37" kindref="member">compute_d</ref>(<ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;np);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1aec25929c6144281a8f2c77c2f5f7a02c" kindref="member">update_z</ref>(<ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a707f6f999edbd59543ddd72371dea2ba" kindref="member">update_r</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a1c3319a116ecd20d13c2c9cf30062c32" kindref="member">add_constraint</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;iq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;rnorm);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" kindref="member">delete_constraint</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/><ref refid="classVector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;A,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;iq,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>for<sp/>computing<sp/>the<sp/>Cholesky<sp/>decomposition<sp/>and<sp/>solving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>linear<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a2761596054f3b85f7758f4832ed11ed3" kindref="member">cholesky_decomposition</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;A);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a546f5c5596dddb3f6a3538503de4965d" kindref="member">cholesky_solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;L,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;b);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a32ae2c99b85807ba20286c1a5c161a26" kindref="member">forward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;L,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;b);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1af5e0bdb3a846d9de3ee74a9a8c8c1934" kindref="member">backward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;U,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>for<sp/>computing<sp/>the<sp/>scalar<sp/>product<sp/>and<sp/>the<sp/>euclidean<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distance<sp/>between<sp/>two<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1ae73d813670287effead12dc193c041b4" kindref="member">distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Solving<sp/>function,<sp/>implementing<sp/>the<sp/>Goldfarb-Idnani<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a4da9671c990051588cdaf629eeab3f9e" kindref="member">solve_quadprog</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;G,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;g0,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;CE,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;ce0,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;CI,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;ci0,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>msg;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>G.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>(),<sp/>p<sp/>=<sp/>CE.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>(),<sp/>m<sp/>=<sp/>CI.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(G.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>matrix<sp/>H<sp/>is<sp/>not<sp/>a<sp/>squared<sp/>matrix<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>allocations_aux<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>G.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(msg.str());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CE.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>matrix<sp/>Aeq<sp/>is<sp/>incompatible<sp/>(incorrect<sp/>number<sp/>of<sp/>rows<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>CE.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,<sp/>expecting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(msg.str());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ce0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>vector<sp/>beq<sp/>is<sp/>incompatible<sp/>(incorrect<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ce0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expecting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(msg.str());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>matrix<sp/>A<sp/>is<sp/>incompatible<sp/>(incorrect<sp/>number<sp/>of<sp/>rows<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,<sp/>expecting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(msg.str());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>vector<sp/>b<sp/>is<sp/>incompatible<sp/>(incorrect<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ci0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expecting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(msg.str());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>x.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>(n);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>l;<sp/></highlight><highlight class="comment">/*<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>constraint<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>R(n,<sp/>n);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>J(n,<sp/>n);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>s(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>z(n);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>r(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>d(n);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>np(n);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>u(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>x_old(n);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>u_old(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f_value,<sp/>psi,<sp/>c1,<sp/>c2,<sp/>sum,<sp/>ss,<sp/>R_norm;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inf;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>inf<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>,<sp/>t1,<sp/>t2;<sp/></highlight><highlight class="comment">/*<sp/>t<sp/>is<sp/>the<sp/>step<sp/>lenght,<sp/>which<sp/>is<sp/>the<sp/>minimum<sp/>of<sp/>the<sp/>partial<sp/>step<sp/>length<sp/>t1</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>and<sp/>the<sp/>full<sp/>step<sp/>length<sp/>t2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;int&gt;</ref><sp/>A(m<sp/>+<sp/>p),<sp/>A_old(m<sp/>+<sp/>p),<sp/>iai(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq,<sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;bool&gt;</ref><sp/>iaexcl(m<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>p<sp/>is<sp/>the<sp/>number<sp/>of<sp/>equality<sp/>constraints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m<sp/>is<sp/>the<sp/>number<sp/>of<sp/>inequality<sp/>constraints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>active<sp/>set<sp/>A<sp/>(containing<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>active<sp/>constraints)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>solve_quadprog&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>H);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;Aeq&quot;</highlight><highlight class="normal">,<sp/>Aeq);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;beq&quot;</highlight><highlight class="normal">,<sp/>beq);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Preprocessing<sp/>phase</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>trace<sp/>of<sp/>the<sp/>original<sp/>matrix<sp/>H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>+=<sp/>G[i][i];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decompose<sp/>the<sp/>matrix<sp/>H<sp/>in<sp/>the<sp/>form<sp/>L^T<sp/>L<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a2761596054f3b85f7758f4832ed11ed3" kindref="member">cholesky_decomposition</ref>(G);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">,<sp/>H);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>matrix<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i][j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>R_norm<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>variable<sp/>will<sp/>hold<sp/>the<sp/>norm<sp/>of<sp/>the<sp/>matrix<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>factorized<sp/>matrix<sp/>H^-1,<sp/>this<sp/>is<sp/>the<sp/>initial<sp/>value<sp/>for<sp/>H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a32ae2c99b85807ba20286c1a5c161a26" kindref="member">forward_elimination</ref>(G,<sp/>z,<sp/>d);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[i][j]<sp/>=<sp/>z[j];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>+=<sp/>z[i];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;J&quot;</highlight><highlight class="normal">,<sp/>J);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>c1<sp/>*<sp/>c2<sp/>is<sp/>an<sp/>estimate<sp/>for<sp/>cond(H)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Find<sp/>the<sp/>unconstrained<sp/>minimizer<sp/>of<sp/>the<sp/>quadratic<sp/>form<sp/>0.5<sp/>*<sp/>allocations_aux<sp/>H<sp/>allocations_aux<sp/>+<sp/>f<sp/>allocations_aux</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>this<sp/>is<sp/>a<sp/>feasible<sp/>point<sp/>in<sp/>the<sp/>dual<sp/>space</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>allocations_aux<sp/>=<sp/>H^-1<sp/>*<sp/>f</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a546f5c5596dddb3f6a3538503de4965d" kindref="member">cholesky_solve</ref>(G,<sp/>x,<sp/>g0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>-x[i];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>compute<sp/>the<sp/>current<sp/>solution<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>f_value<sp/>=<sp/>0.5<sp/>*<sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(g0,<sp/>x);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unconstrained<sp/>solution:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f_value<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>equality<sp/>constraints<sp/>to<sp/>the<sp/>working<sp/>set<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>iq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>p;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np[j]<sp/>=<sp/>CE[j][i];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a245b4ca230c9916c941d5952b463fb37" kindref="member">compute_d</ref>(d,<sp/>J,<sp/>np);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1aec25929c6144281a8f2c77c2f5f7a02c" kindref="member">update_z</ref>(z,<sp/>J,<sp/>d,<sp/>iq);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a707f6f999edbd59543ddd72371dea2ba" kindref="member">update_r</ref>(R,<sp/>r,<sp/>d,<sp/>iq);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>R,<sp/>n,<sp/>iq);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>r,<sp/>iq);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>full<sp/>step<sp/>length<sp/>t2:<sp/>i.e.,<sp/>the<sp/>minimum<sp/>step<sp/>in<sp/>primal<sp/>space<sp/>s.t.<sp/>the<sp/>contraint</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>becomes<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>z))<sp/>&gt;<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>z<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(-<ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(np,<sp/>x)<sp/>-<sp/>ce0[i])<sp/>/<sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>allocations_aux<sp/>=<sp/>allocations_aux<sp/>+<sp/>t2<sp/>*<sp/>z<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>(int)<sp/>n;<sp/>k++)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[k]<sp/>+=<sp/>t2<sp/>*<sp/>z[k];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>u<sp/>=<sp/>u+<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[iq]<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>iq;<sp/>k++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[k]<sp/>-=<sp/>t2<sp/>*<sp/>r[k];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>new<sp/>solution<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_value<sp/>+=<sp/>0.5<sp/>*<sp/>(t2<sp/>*<sp/>t2)<sp/>*<sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i]<sp/>=<sp/>-i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="QuadProg_09_09_8cpp_1a1c3319a116ecd20d13c2c9cf30062c32" kindref="member">add_constraint</ref>(R,<sp/>J,<sp/>d,<sp/>iq,<sp/>R_norm))<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Equality<sp/>constraints<sp/>are<sp/>linearly<sp/>dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Constraints<sp/>are<sp/>linearly<sp/>dependent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>iai<sp/>=<sp/>K<sp/>\<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>m;<sp/>i++)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>l1:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>iter++;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>1:<sp/>choose<sp/>a<sp/>violated<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>p;<sp/>i<sp/>&lt;<sp/>iq;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip<sp/>=<sp/>A[i];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[ip]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>s[allocations_aux]<sp/>=<sp/>ci^T<sp/>*<sp/>allocations_aux<sp/>+<sp/>b<sp/>for<sp/>all<sp/>elements<sp/>of<sp/>K<sp/>\<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>psi<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>value<sp/>will<sp/>contain<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>infeasibilities<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>ip<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>ip<sp/>will<sp/>be<sp/>the<sp/>index<sp/>of<sp/>the<sp/>chosen<sp/>violated<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iaexcl[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>CI[j][i]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>ci0[i];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psi<sp/>+=<sp/>std::min(0.0,<sp/>sum);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>m);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(psi)<sp/>&lt;=<sp/>m<sp/>*<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>*<sp/>c1<sp/>*<sp/>c2<sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100.0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>numerically<sp/>there<sp/>are<sp/>not<sp/>infeasibilities<sp/>anymore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_value;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>old<sp/>values<sp/>for<sp/>u<sp/>and<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iq;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_old[i]<sp/>=<sp/>u[i];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_old[i]<sp/>=<sp/>A[i];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>for<sp/>allocations_aux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_old[i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>l2:<sp/></highlight><highlight class="comment">/*<sp/>Step<sp/>2:<sp/>check<sp/>for<sp/>feasibility<sp/>and<sp/>determine<sp/>a<sp/>new<sp/>S-pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[i]<sp/>&lt;<sp/>ss<sp/>&amp;&amp;<sp/>iai[i]<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>iaexcl[i])<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>s[i];</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss<sp/>&gt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_value;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>np<sp/>=<sp/>n[ip]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np[i]<sp/>=<sp/>CI[i][ip];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>u<sp/>=<sp/>[u<sp/>0]^T<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>u[iq]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>ip<sp/>to<sp/>the<sp/>active<sp/>set<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>A[iq]<sp/>=<sp/>ip;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>with<sp/>constraint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ip<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;np&quot;</highlight><highlight class="normal">,<sp/>np);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>l2a:</highlight><highlight class="comment">/*<sp/>Step<sp/>2a:<sp/>determine<sp/>step<sp/>direction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>z<sp/>=<sp/>H<sp/>np:<sp/>the<sp/>step<sp/>direction<sp/>in<sp/>the<sp/>primal<sp/>space<sp/>(through<sp/>J,<sp/>see<sp/>the<sp/>paper)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a245b4ca230c9916c941d5952b463fb37" kindref="member">compute_d</ref>(d,<sp/>J,<sp/>np);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1aec25929c6144281a8f2c77c2f5f7a02c" kindref="member">update_z</ref>(z,<sp/>J,<sp/>d,<sp/>iq);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>N*<sp/>np<sp/>(if<sp/>q<sp/>&gt;<sp/>0):<sp/>the<sp/>negative<sp/>of<sp/>the<sp/>step<sp/>direction<sp/>in<sp/>the<sp/>dual<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a707f6f999edbd59543ddd72371dea2ba" kindref="member">update_r</ref>(R,<sp/>r,<sp/>d,<sp/>iq);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>direction<sp/>z&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>r,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,<sp/>u,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Step<sp/>2b:<sp/>compute<sp/>step<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>t1:<sp/>partial<sp/>step<sp/>length<sp/>(maximum<sp/>step<sp/>in<sp/>dual<sp/>space<sp/>without<sp/>violating<sp/>dual<sp/>feasibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>inf;<sp/></highlight><highlight class="comment">/*<sp/>+inf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>the<sp/>index<sp/>l<sp/>s.t.<sp/>it<sp/>reaches<sp/>the<sp/>minimum<sp/>of<sp/>u+[allocations_aux]<sp/>/<sp/>r<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>p;<sp/>k<sp/>&lt;<sp/>iq;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r[k]<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u[k]<sp/>/<sp/>r[k]<sp/>&lt;<sp/>t1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>u[k]<sp/>/<sp/>r[k];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>A[k];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>t2:<sp/>full<sp/>step<sp/>length<sp/>(minimum<sp/>step<sp/>in<sp/>primal<sp/>space<sp/>such<sp/>that<sp/>the<sp/>constraint<sp/>ip<sp/>becomes<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>z))<sp/>&gt;<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>z<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>-s[ip]<sp/>/<sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>patch<sp/>suggested<sp/>by<sp/>Takano<sp/>Akio<sp/>for<sp/>handling<sp/>numerical<sp/>inconsistencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>inf;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>inf;<sp/></highlight><highlight class="comment">/*<sp/>+inf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>step<sp/>is<sp/>chosen<sp/>as<sp/>the<sp/>minimum<sp/>of<sp/>t1<sp/>and<sp/>t2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/>std::min(t1,<sp/>t2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>sizes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(t1<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>t2<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Step<sp/>2c:<sp/>determine<sp/>new<sp/>S-pair<sp/>and<sp/>take<sp/>step:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>(i):<sp/>no<sp/>step<sp/>in<sp/>primal<sp/>or<sp/>dual<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&gt;=<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>QPP<sp/>is<sp/>infeasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>unbounded<sp/>to<sp/>raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>(ii):<sp/>step<sp/>in<sp/>dual<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&gt;=<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>u<sp/>=<sp/>u<sp/>+<sp/><sp/>t<sp/>*<sp/>[-r<sp/>1]<sp/>and<sp/>drop<sp/>constraint<sp/>l<sp/>from<sp/>the<sp/>active<sp/>set<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>iq;<sp/>k++)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[k]<sp/>-=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/>r[k];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[iq]<sp/>+=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[l]<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" kindref="member">delete_constraint</ref>(R,<sp/>J,<sp/>A,<sp/>u,<sp/>n,<sp/>p,<sp/>iq,<sp/>l);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>dual<sp/>space:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>f_value<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>l2a;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>(iii):<sp/>step<sp/>in<sp/>primal<sp/>and<sp/>dual<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>allocations_aux<sp/>=<sp/>allocations_aux<sp/>+<sp/>t<sp/>*<sp/>z<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>(int)<sp/>n;<sp/>k++)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[k]<sp/>+=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/>z[k];</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>solution<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>f_value<sp/>+=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(z,<sp/>np)<sp/>*<sp/>(0.5<sp/>*<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>+<sp/>u[iq]);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>u<sp/>=<sp/>u<sp/>+<sp/>t<sp/>*<sp/>[-r<sp/>1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>iq;<sp/>k++)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[k]<sp/>-=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/>r[k];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>u[iq]<sp/>+=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>both<sp/>spaces:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>f_value<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,<sp/>u,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>r,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>-<sp/>t2)<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Full<sp/>step<sp/>has<sp/>taken<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>full<sp/>step<sp/>has<sp/>taken<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>constraint<sp/>ip<sp/>to<sp/>the<sp/>active<sp/>set*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="QuadProg_09_09_8cpp_1a1c3319a116ecd20d13c2c9cf30062c32" kindref="member">add_constraint</ref>(R,<sp/>J,<sp/>d,<sp/>iq,<sp/>R_norm))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iaexcl[ip]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" kindref="member">delete_constraint</ref>(R,<sp/>J,<sp/>A,<sp/>u,<sp/>n,<sp/>p,<sp/>iq,<sp/>ip);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>R);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;iai&quot;</highlight><highlight class="normal">,<sp/>iai);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>m;<sp/>i++)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>p;<sp/>i<sp/>&lt;<sp/>iq;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i]<sp/>=<sp/>A_old[i];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>u_old[i];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[A[i]]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x_old[i];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>l2;<sp/></highlight><highlight class="comment">/*<sp/>go<sp/>to<sp/>step<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iai[ip]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>R);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;iai&quot;</highlight><highlight class="normal">,<sp/>iai);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>l1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>a<sp/>patial<sp/>step<sp/>has<sp/>taken<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Partial<sp/>step<sp/>has<sp/>taken<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;allocations_aux&quot;</highlight><highlight class="normal">,<sp/>allocations_aux);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>drop<sp/>constraint<sp/>l<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>iai[l]<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" kindref="member">delete_constraint</ref>(R,<sp/>J,<sp/>A,<sp/>u,<sp/>n,<sp/>p,<sp/>iq,<sp/>l);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>R);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A,<sp/>iq);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>s[ip]<sp/>=<sp/>A<sp/>*<sp/>allocations_aux<sp/>+<sp/>b<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>(int)<sp/>n;<sp/>k++)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>CI[k][ip]<sp/>*<sp/>x[k];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>s[ip]<sp/>=<sp/>sum<sp/>+<sp/>ci0[ip];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>m);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>l2a;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a769f3a6ed2afed301b8067d8972c7aba" kindref="member">solve_quadprog_matlab_syntax</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;G,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;g0,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;CE,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;ce0,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;CI,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;ci0,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;lb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;ub,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>CE_T;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>expanded_CI;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>CE_T.<ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(0,<sp/>CE.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>(),<sp/>CE.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>expanded_CI.<ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(0,<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>+<sp/>ub.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>(),<sp/>CI.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CE.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>CE.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CE_T[j][i]<sp/>=<sp/>CE[i][j];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>ce0_inv;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>ce0_inv.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>(0,<sp/>ce0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ce0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ce0_inv[i]<sp/>=<sp/>-ce0[i];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>ci0_inv;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>ci0_inv.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>((0,<sp/>ci0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>+<sp/>ub.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ci0.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ci0_inv[i]<sp/>=<sp/>-ci0[i];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>CI.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_CI[i][j]<sp/>=<sp/>CI[i][j];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i<sp/>&lt;<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_CI[i][i<sp/>-<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_CI[i+lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()][i<sp/>-<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>expanded_CI_inv;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>expanded_CI_inv.<ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(0,<sp/>expanded_CI.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>(),<sp/>expanded_CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>expanded_CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>expanded_CI.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expanded_CI_inv[j][i]<sp/>=<sp/>expanded_CI[i][j];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i<sp/>&lt;<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ci0_inv[i]<sp/>=<sp/>-lb[i<sp/>-<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ci0_inv[i<sp/>+<sp/>lb.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()]<sp/>=<sp/>ub[i<sp/>-<sp/>CI.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()];</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_matrix(&quot;H&quot;,<sp/>G);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_vector(&quot;f&quot;,<sp/>g0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_matrix(&quot;Aeq&quot;,<sp/>CE_T);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_vector(&quot;beq&quot;,<sp/>ce0_inv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_matrix(&quot;A&quot;,<sp/>expanded_CI_inv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>print_vector(&quot;b&quot;,<sp/>ci0_inv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a4da9671c990051588cdaf629eeab3f9e" kindref="member">solve_quadprog</ref>(G,<sp/>g0,<sp/>CE_T,<sp/>ce0_inv,<sp/>expanded_CI_inv,<sp/>ci0_inv,<sp/>x);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(x[i])<sp/>&lt;<sp/>1e-12)<sp/>x[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a245b4ca230c9916c941d5952b463fb37" kindref="member">compute_d</ref>(<ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;np)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>(int)<sp/>d.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>d<sp/>=<sp/>H^T<sp/>*<sp/>np<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>J[j][i]<sp/>*<sp/>np[j];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1aec25929c6144281a8f2c77c2f5f7a02c" kindref="member">update_z</ref>(<ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>(int)<sp/>z.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setting<sp/>of<sp/>z<sp/>=<sp/>H<sp/>*<sp/>d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>iq;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>+=<sp/>J[i][j]<sp/>*<sp/>d[j];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a707f6f999edbd59543ddd72371dea2ba" kindref="member">update_r</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setting<sp/>of<sp/>r<sp/>=<sp/>R^-1<sp/>d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>iq<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>iq;<sp/>j++)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>R[i][j]<sp/>*<sp/>r[j];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>(d[i]<sp/>-<sp/>sum)<sp/>/<sp/>R[i][i];</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a1c3319a116ecd20d13c2c9cf30062c32" kindref="member">add_constraint</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;iq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;R_norm)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>d.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>constraint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iq<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cc,<sp/>ss,<sp/>h,<sp/>t1,<sp/>t2,<sp/>xny;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>to<sp/>find<sp/>the<sp/>Givens<sp/>rotation<sp/>which<sp/>will<sp/>reduce<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>d[j]<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>is<sp/>already<sp/>zero<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything,<sp/>except<sp/>of</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>decreasing<sp/>j<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>n<sp/>-<sp/>1;<sp/>j<sp/>&gt;=<sp/>iq<sp/>+<sp/>1;<sp/>j--)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Givens<sp/>rotation<sp/>is<sp/>done<sp/>with<sp/>the<sp/>matrix<sp/>(cc<sp/>cs,<sp/>cs<sp/>-cc).</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>cc<sp/>is<sp/>one,<sp/>then<sp/>element<sp/>(j)<sp/>of<sp/>d<sp/>is<sp/>zero<sp/>compared<sp/>with<sp/>element</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(j<sp/>-<sp/>1).<sp/>Hence<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>cc<sp/>is<sp/>zero,<sp/>then<sp/>we<sp/>just<sp/>have<sp/>to<sp/>switch<sp/>column<sp/>(j)<sp/>and<sp/>column<sp/>(j<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>J.<sp/>Since<sp/>we<sp/>only<sp/>switch<sp/>columns<sp/>in<sp/>J,<sp/>we<sp/>have<sp/>to<sp/>be<sp/>careful<sp/>how<sp/>we</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update<sp/>d<sp/>depending<sp/>on<sp/>the<sp/>sign<sp/>of<sp/>gs.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise<sp/>we<sp/>have<sp/>to<sp/>apply<sp/>the<sp/>Givens<sp/>rotation<sp/>to<sp/>these<sp/>columns.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>i<sp/>-<sp/>1<sp/>element<sp/>of<sp/>d<sp/>has<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>d[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>d[j];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="QuadProg_09_09_8cpp_1ae73d813670287effead12dc193c041b4" kindref="member">distance</ref>(cc,<sp/>ss);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(h)<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/></highlight><highlight class="comment">//<sp/>h<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>ss<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>cc<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>-cc;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>-ss;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[j<sp/>-<sp/>1]<sp/>=<sp/>-h;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[j<sp/>-<sp/>1]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xny<sp/>=<sp/>ss<sp/>/<sp/>(1.0<sp/>+<sp/>cc);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>J[k][j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>J[k][j];</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[k][j<sp/>-<sp/>1]<sp/>=<sp/>t1<sp/>*<sp/>cc<sp/>+<sp/>t2<sp/>*<sp/>ss;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[k][j]<sp/>=<sp/>xny<sp/>*<sp/>(t1<sp/>+<sp/>J[k][j<sp/>-<sp/>1])<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>number<sp/>of<sp/>constraints<sp/>added*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>iq++;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>update<sp/>R<sp/>we<sp/>have<sp/>to<sp/>put<sp/>the<sp/>iq<sp/>components<sp/>of<sp/>the<sp/>d<sp/>vector</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>column<sp/>iq<sp/>-<sp/>1<sp/>of<sp/>R</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iq;<sp/>i++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[i][iq<sp/>-<sp/>1]<sp/>=<sp/>d[i];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>iq<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>R,<sp/>iq,<sp/>iq);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="stringliteral">&quot;J&quot;</highlight><highlight class="normal">,<sp/>J);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>d,<sp/>iq);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(d[iq<sp/>-<sp/>1])<sp/>&lt;=<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>*<sp/>R_norm)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>problem<sp/>degenerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>R_norm<sp/>=<sp/>std::max&lt;double&gt;(R_norm,<sp/>fabs(d[iq<sp/>-<sp/>1]));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1abf65527e939107422b2ccdc8f0044513" kindref="member">delete_constraint</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;R,<sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;J,<sp/><ref refid="classVector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;A,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;iq,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Delete<sp/>constraint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>l<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iq;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>qq<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>prevent<sp/>warnings<sp/>from<sp/>smart<sp/>compilers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cc,<sp/>ss,<sp/>h,<sp/>xny,<sp/>t1,<sp/>t2;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>index<sp/>qq<sp/>for<sp/>active<sp/>constraint<sp/>l<sp/>to<sp/>be<sp/>removed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>p;<sp/>i<sp/>&lt;<sp/>iq;<sp/>i++)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A[i]<sp/>==<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qq<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>the<sp/>constraint<sp/>from<sp/>the<sp/>active<sp/>set<sp/>and<sp/>the<sp/>duals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>qq;<sp/>i<sp/>&lt;<sp/>iq<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i]<sp/>=<sp/>A[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/>u[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j][i]<sp/>=<sp/>R[j][i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>A[iq<sp/>-<sp/>1]<sp/>=<sp/>A[iq];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>u[iq<sp/>-<sp/>1]<sp/>=<sp/>u[iq];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>A[iq]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>u[iq]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>iq;<sp/>j++)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j][iq<sp/>-<sp/>1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>constraint<sp/>has<sp/>been<sp/>fully<sp/>removed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>iq--;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TRACE_SOLVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iq<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iq<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>qq;<sp/>j<sp/>&lt;<sp/>iq;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>R[j][j];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>R[j<sp/>+<sp/>1][j];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="QuadProg_09_09_8cpp_1ae73d813670287effead12dc193c041b4" kindref="member">distance</ref>(cc,<sp/>ss);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(h)<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/></highlight><highlight class="comment">//<sp/>h<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>cc<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>ss<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j<sp/>+<sp/>1][j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j][j]<sp/>=<sp/>-h;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>-cc;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>-ss;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j][j]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xny<sp/>=<sp/>ss<sp/>/<sp/>(1.0<sp/>+<sp/>cc);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>j<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>iq;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>R[j][k];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>R[j<sp/>+<sp/>1][k];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j][k]<sp/>=<sp/>t1<sp/>*<sp/>cc<sp/>+<sp/>t2<sp/>*<sp/>ss;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[j<sp/>+<sp/>1][k]<sp/>=<sp/>xny<sp/>*<sp/>(t1<sp/>+<sp/>R[j][k])<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>J[k][j];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>J[k][j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[k][j]<sp/>=<sp/>t1<sp/>*<sp/>cc<sp/>+<sp/>t2<sp/>*<sp/>ss;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[k][j<sp/>+<sp/>1]<sp/>=<sp/>xny<sp/>*<sp/>(J[k][j]<sp/>+<sp/>t1)<sp/>-<sp/>t2;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1ae73d813670287effead12dc193c041b4" kindref="member">distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a1,<sp/>b1,<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>fabs(a);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>fabs(b);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a1<sp/>&gt;<sp/>b1)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/>(b1<sp/>/<sp/>a1);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a1<sp/>*<sp/>sqrt(1.0<sp/>+<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1<sp/>&gt;<sp/>a1)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/>(a1<sp/>/<sp/>b1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b1<sp/>*<sp/>sqrt(1.0<sp/>+<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>*<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a1<sp/>*<sp/>sqrt(2.0);</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1ac2ef168408b3da5d1096482f75627716" kindref="member">scalar_product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n<sp/>=<sp/>x.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>x[i]<sp/>*<sp/>y[i];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a2761596054f3b85f7758f4832ed11ed3" kindref="member">cholesky_decomposition</ref>(<ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;A)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>n<sp/>=<sp/>A.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>A[i][j];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i<sp/>-<sp/>1;<sp/>k<sp/>&gt;=<sp/>0;<sp/>k--)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>A[i][k]<sp/>*<sp/>A[j][k];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>raise<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>A);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>cholesky<sp/>decomposition,<sp/>sum:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sum;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(os.str());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i][i]<sp/>=<sp/>sqrt(sum);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[j][i]<sp/>=<sp/>sum<sp/>/<sp/>A[i][i];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>n;<sp/>k++)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[i][k]<sp/>=<sp/>A[k][i];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a546f5c5596dddb3f6a3538503de4965d" kindref="member">cholesky_solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;L,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>L.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>y((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L<sp/>*<sp/>y<sp/>=<sp/>b<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1a32ae2c99b85807ba20286c1a5c161a26" kindref="member">forward_elimination</ref>(L,<sp/>y,<sp/>b);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L^T<sp/>*<sp/>allocations_aux<sp/>=<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuadProg_09_09_8cpp_1af5e0bdb3a846d9de3ee74a9a8c8c1934" kindref="member">backward_elimination</ref>(L,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a32ae2c99b85807ba20286c1a5c161a26" kindref="member">forward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;L,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>L.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>b[0]<sp/>/<sp/>L[0][0];</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>-=<sp/>L[i][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>y[i]<sp/>/<sp/>L[i][i];</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1af5e0bdb3a846d9de3ee74a9a8c8c1934" kindref="member">backward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;U,<sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>U.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>x[n<sp/>-<sp/>1]<sp/>=<sp/>y[n<sp/>-<sp/>1]<sp/>/<sp/>U[n<sp/>-<sp/>1][n<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>n<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>-=<sp/>U[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x[i]<sp/>/<sp/>U[i][i];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a950ea74c73b17523df2bc32873610379" kindref="member">print_matrix</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;double&gt;</ref><sp/>&amp;A,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>A.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>A.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>A[i][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/>s.str();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>.substr(0,<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>.size()<sp/>-<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>To<sp/>remove<sp/>the<sp/>trailing<sp/>space,<sp/>comma<sp/>and<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="QuadProg_09_09_8cpp_1a434f9edcb83f5b7547976a672fbc228c" kindref="member">print_vector</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;double&gt;</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>v[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/>s.str();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>=<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>.substr(0,<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>.size()<sp/>-<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>To<sp/>remove<sp/>the<sp/>trailing<sp/>space<sp/>and<sp/>comma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Utils/QPSolver/QuadProg++.cpp"/>
  </compounddef>
</doxygen>
