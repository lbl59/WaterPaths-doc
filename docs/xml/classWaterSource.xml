<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classWaterSource" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>WaterSource</compoundname>
    <derivedcompoundref refid="classAllocatedIntake" prot="public" virt="non-virtual">AllocatedIntake</derivedcompoundref>
    <derivedcompoundref refid="classAllocatedIntakeExpansion" prot="public" virt="non-virtual">AllocatedIntakeExpansion</derivedcompoundref>
    <derivedcompoundref refid="classIntake" prot="public" virt="non-virtual">Intake</derivedcompoundref>
    <derivedcompoundref refid="classIntakeExpansion" prot="public" virt="non-virtual">IntakeExpansion</derivedcompoundref>
    <derivedcompoundref refid="classJointWTP" prot="public" virt="non-virtual">JointWTP</derivedcompoundref>
    <derivedcompoundref refid="classRelocation" prot="public" virt="non-virtual">Relocation</derivedcompoundref>
    <derivedcompoundref refid="classReservoir" prot="public" virt="non-virtual">Reservoir</derivedcompoundref>
    <derivedcompoundref refid="classReservoirExpansion" prot="public" virt="non-virtual">ReservoirExpansion</derivedcompoundref>
    <derivedcompoundref refid="classSequentialJointTreatmentExpansion" prot="public" virt="non-virtual">SequentialJointTreatmentExpansion</derivedcompoundref>
    <derivedcompoundref refid="classWaterReuse" prot="public" virt="non-virtual">WaterReuse</derivedcompoundref>
    <includes refid="WaterSource_8h" local="no">WaterSource.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classWaterSource_1a49e1a191152e344e2161e8db166e067a" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::available_volume</definition>
        <argsstring></argsstring>
        <name>available_volume</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total available volume in the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="25" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a5e6992931464ed75576326b9f1bd3c4f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::total_outflow</definition>
        <argsstring></argsstring>
        <name>total_outflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total outflow from the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="29" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a7a69b2e9b6030f1035e6cf44d2918ee5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::upstream_source_inflow</definition>
        <argsstring></argsstring>
        <name>upstream_source_inflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total upstream inflow to the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="33" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1aeb5a2d2d83383a70ca20f3e94635a9c7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::wastewater_inflow</definition>
        <argsstring></argsstring>
        <name>wastewater_inflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total inflow from wastewater treatment plants. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="37" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1aceb2d77612db7ba71a171848a5e03b4f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::upstream_catchment_inflow</definition>
        <argsstring></argsstring>
        <name>upstream_catchment_inflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total inflow from upstream catchments into the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="41" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a1934917dd35a2508a5102eb5831431b7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::total_demand</definition>
        <argsstring></argsstring>
        <name>total_demand</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total demand being drawn from the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="45" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a3f04ae75d6235117d391dece2d323890" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::policy_added_demand</definition>
        <argsstring></argsstring>
        <name>policy_added_demand</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The total demand added to the water source by policy. FIXME: Definition is not clear. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="50" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a036d7980e74224fd5f5c6a390e0d5abb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::permitting_time</definition>
        <argsstring></argsstring>
        <name>permitting_time</name>
        <initializer>= NON_INITIALIZED</initializer>
        <briefdescription>
<para>Permitting time required to build the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="54" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a413b094e11bdce62f4d82e5bb9e4706e" prot="protected" static="no" mutable="no">
        <type>vector&lt; <ref refid="classBond" kindref="compound">Bond</ref> * &gt;</type>
        <definition>vector&lt;Bond *&gt; WaterSource::bonds</definition>
        <argsstring></argsstring>
        <name>bonds</name>
        <briefdescription>
<para>Bonds associated with the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="58" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a67165e29345b61f36c8d8ccf3f648819" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::upstream_min_env_inflow</definition>
        <argsstring></argsstring>
        <name>upstream_min_env_inflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Minimum upstream environmental inflow required by the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="62" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a2ec257b415b248214a8bce7fc5267723" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <initializer>= NON_INITIALIZED</initializer>
        <briefdescription>
<para>Total capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="66" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a49f9da70a5080abe82160b1a0d194e60" prot="protected" static="no" mutable="no">
        <type>vector&lt; int &gt;</type>
        <definition>vector&lt;int&gt; WaterSource::built_in_sequence</definition>
        <argsstring></argsstring>
        <name>built_in_sequence</name>
        <briefdescription>
<para>Sequence of water sources that are connected to this water source. FIXME: Needs to be clarified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="72" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a77d3fe9ea445fc987b07debdfb9e2f5b" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::available_allocated_volumes</definition>
        <argsstring></argsstring>
        <name>available_allocated_volumes</name>
        <briefdescription>
<para>Available allocated volumes of raw water supplying the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="76" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1ab94063d51314cfb896010408ae32fa9c" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::allocated_capacities</definition>
        <argsstring></argsstring>
        <name>allocated_capacities</name>
        <briefdescription>
<para>Allocated capacities of the water source to each utility. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="80" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a87dc0bfb5cf4e2b9a953c7a80058c923" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::allocated_treatment_capacities</definition>
        <argsstring></argsstring>
        <name>allocated_treatment_capacities</name>
        <briefdescription>
<para>Allocated treatment capacities of the water source to each utility. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="84" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1aa73fe10cfc6579b2fb79529e1dde5140" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::allocated_treatment_fractions</definition>
        <argsstring></argsstring>
        <name>allocated_treatment_fractions</name>
        <briefdescription>
<para>Allocated treatment fractions of the water source to each utility. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="88" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a2f6655a80c4847fe039987255d9d998c" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::allocated_fractions</definition>
        <argsstring></argsstring>
        <name>allocated_fractions</name>
        <briefdescription>
<para>Allocated overall fractions of the water source to each utility. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="92" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a87535be59994b2602576cdf34dbe04b9" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::supply_allocated_fractions</definition>
        <argsstring></argsstring>
        <name>supply_allocated_fractions</name>
        <briefdescription>
<para>Utilities with allocations to the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="96" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1ac345583fc2d0f7e1db31ee40244d7ace" prot="protected" static="no" mutable="no">
        <type>vector&lt; int &gt; *</type>
        <definition>vector&lt;int&gt;* WaterSource::utilities_with_allocations</definition>
        <argsstring></argsstring>
        <name>utilities_with_allocations</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Utilities with allocations to the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="101" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1acef73d9b1675fb6db9ec39347514db6d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int WaterSource::wq_pool_id</definition>
        <argsstring></argsstring>
        <name>wq_pool_id</name>
        <initializer>= NON_INITIALIZED</initializer>
        <briefdescription>
<para>ID of the water quality pool, which is the water source used to ensure minimum environmental flows downstream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="106" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a4be6864dc196287bdf8329b3aa6ca662" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::total_allocated_fraction</definition>
        <argsstring></argsstring>
        <name>total_allocated_fraction</name>
        <initializer>= NON_INITIALIZED</initializer>
        <briefdescription>
<para>Total allocated fraction of the catchments supplying the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="110" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1aef4e289b47c2360f2e991ea3ee535781" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool WaterSource::online</definition>
        <argsstring></argsstring>
        <name>online</name>
        <briefdescription>
<para>Flag indicating if the water source is online. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="114" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a8c18c34f23f8a06685c1d12f462ed830" prot="protected" static="no" mutable="no">
        <type>vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> &gt;</type>
        <definition>vector&lt;Catchment&gt; WaterSource::catchments</definition>
        <argsstring></argsstring>
        <name>catchments</name>
        <briefdescription>
<para>A vector of all the catchements that supply the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="118" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1adae67ac96597e4b25332002b88a9a52b" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::min_environmental_outflow</definition>
        <argsstring></argsstring>
        <name>min_environmental_outflow</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Minimum environmental outflow required by the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="122" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a6085899c4b4cc40fa80784203e1a9755" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::evaporated_volume</definition>
        <argsstring></argsstring>
        <name>evaporated_volume</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total volume evaporated from the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="126" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a2fdfd5ff7d103e71108cf2a31babaccb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double WaterSource::total_treatment_capacity</definition>
        <argsstring></argsstring>
        <name>total_treatment_capacity</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Total treatment capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="130" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a83c6dcf19b64533ce4bc3b918ce6cc8e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int WaterSource::highest_alloc_id</definition>
        <argsstring></argsstring>
        <name>highest_alloc_id</name>
        <initializer>= NON_INITIALIZED</initializer>
        <briefdescription>
<para>The ID of the utility with the highest percent allocation from the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="134" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classWaterSource_1abaf6cb0ecca08c87428ad516f11f8c2e" prot="protected" static="yes" mutable="no">
        <type>int</type>
        <definition>int WaterSource::seed</definition>
        <argsstring></argsstring>
        <name>seed</name>
        <briefdescription>
<para>Seed to generate the random construction time. FIXME: Needs to be clarified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="140" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classWaterSource_1a6eafe5dfefd317877d1244e8a7c6e742" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int WaterSource::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>The unique identifier of the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="173" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1a846ea74c5b453d014f594d41fee8c765" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* WaterSource::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>The name of the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="177" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1afdd12c29fc74ea21dff1f1be9b8c2b7b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int WaterSource::source_type</definition>
        <argsstring></argsstring>
        <name>source_type</name>
        <briefdescription>
<para>The type of the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="181" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classWaterSource_1ae059fbe3f911a819bac0202f7f45e8e4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double WaterSource::construction_time</definition>
        <argsstring></argsstring>
        <name>construction_time</name>
        <briefdescription>
<para>The time required to build the water source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="185" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classWaterSource_1ac070445379fe706f65b977dade4f3fbc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void WaterSource::applyContinuity</definition>
        <argsstring>(int week, double upstream_source_inflow, double wastewater_inflow, vector&lt; double &gt; &amp;demand_outflow)=0</argsstring>
        <name>applyContinuity</name>
        <reimplementedby refid="classReservoirExpansion_1a18614050354dced5cc2747eeda0c2397">applyContinuity</reimplementedby>
        <reimplementedby refid="classRelocation_1af5c795c7b331b86b31c8bfa2ef9b6fe5">applyContinuity</reimplementedby>
        <reimplementedby refid="classWaterReuse_1ab8ffb10c69790047a3a5dda66cfaf3ee">applyContinuity</reimplementedby>
        <reimplementedby refid="classIntakeExpansion_1a8686b58c65444182ba19b783fc6ff77f">applyContinuity</reimplementedby>
        <reimplementedby refid="classVariableJointWTP_1ab20f14dccd7079f546984d7bf1c00a71">applyContinuity</reimplementedby>
        <reimplementedby refid="classAllocatedIntakeExpansion_1a67185ec779549c32b289666663232bc4">applyContinuity</reimplementedby>
        <reimplementedby refid="classAllocatedIntake_1a92c562dddb4f6434c8ad766c03b2cf5c">applyContinuity</reimplementedby>
        <reimplementedby refid="classFixedJointWTP_1a68bfbed58c0106d896ef422ae9747d40">applyContinuity</reimplementedby>
        <reimplementedby refid="classSequentialJointTreatmentExpansion_1a64fdd68fc68f6b1145291575c2116815">applyContinuity</reimplementedby>
        <reimplementedby refid="classJointWTP_1a07106b573ea34386621a95d3fbcafd1a">applyContinuity</reimplementedby>
        <reimplementedby refid="classIntake_1acd5ab74c4091b286e69ecdcc495d83ce">applyContinuity</reimplementedby>
        <reimplementedby refid="classQuarry_1a6999b854a740ce92baaa610cf5b08bd9">applyContinuity</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1aa5a3683ac3a1e7a778627332c6a7fff7">applyContinuity</reimplementedby>
        <reimplementedby refid="classReservoir_1a66929c055193785bc9d47bcdf0bc7445">applyContinuity</reimplementedby>
        <param>
          <type>int</type>
          <declname>week</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upstream_source_inflow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>wastewater_inflow</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>demand_outflow</declname>
        </param>
        <briefdescription>
<para>This function handles the continuity calculations for a water source, ensuring proper inflow and outflow. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>week</parametername>
</parameternamelist>
<parameterdescription>
<para>The current week of the simulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upstream_source_inflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The inflow from upstream water sources. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wastewater_inflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The inflow from wastewater treatment plants. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>demand_outflow</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a vector representing the water demand outflows to each utility.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1abeb8ba4b51c2b270baf9162df76d8b58" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::bypass</definition>
        <argsstring>(int week, double total_upstream_inflow)</argsstring>
        <name>bypass</name>
        <param>
          <type>int</type>
          <declname>week</declname>
        </param>
        <param>
          <type>double</type>
          <declname>total_upstream_inflow</declname>
        </param>
        <briefdescription>
<para>This function bypasses continuity calculations, routing all inflows downstream without adjustments. Does not apply continuity to the water source, by instead just treats it as non existing, i.e. outflow = inflow + catchment_flow. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>week</parametername>
</parameternamelist>
<parameterdescription>
<para>The current week of the simulation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_upstream_inflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The total inflow from upstream sources excluding water for the catchment between both water sources.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classWaterSource_1a27b9d29d6cbb36d128f740f7ca00f500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, vector&lt; int &gt; connected_sources, double treatment_capacity, const int source_type)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a basic <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with the given parameters. Used when the water source is built and operational. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects supplying this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a7723d343a0b8edff36018ca7acf09f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; connected_sources, const int source_type, vector&lt; double &gt; *allocated_treatment_fractions, vector&lt; double &gt; *allocated_fractions, vector&lt; int &gt; *utilities_with_allocations)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_treatment_fractions</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_fractions</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; *</type>
          <declname>utilities_with_allocations</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with pre-set allocation fractions and connected source details. Used when a water source is built and operational. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source (in cubic meters). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source (in cubic meters per week). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_treatment_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of pre-set fractions of the total treatment capacity allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of pre-set fractions of the total storage capacity allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utilities_with_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of IDs for utilities allocated to this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if any issues arise in setting allocations (handled by <computeroutput>setAllocations</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a48641ff06b69505ab298f4f23e759a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; connected_sources, const int source_type, const vector&lt; double &gt; construction_time_range, double permitting_period, Bond &amp;bond)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>construction_time_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>permitting_period</declname>
        </param>
        <param>
          <type><ref refid="classBond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with the provided parameters, including construction and permitting details. Used when the water source does not exist in the beginning of the simulation for water sources financed by only one bond. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>construction_time_range</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the minimum and maximum construction time range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permitting_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitting time required for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bond</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> object associated with financing this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if permitting or construction time is NaN or negative (checked by <computeroutput>checkForInputErrorsConstruction</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a284e207f074da6f485d41f65ac025cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; connected_sources, const int source_type, const vector&lt; double &gt; construction_time_range, double permitting_period, vector&lt; Bond *&gt; bonds)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>construction_time_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>permitting_period</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classBond" kindref="compound">Bond</ref> *&gt;</type>
          <declname>bonds</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with comprehensive parameters, including multiple bonds, construction, and permitting details. Used when the water source does not exist in the beginning of the simulation for water sources financed by a series of bonds (shared water source). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>construction_time_range</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the minimum and maximum construction time range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permitting_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitting time required for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> objects associated with financing this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if permitting or construction time is NaN or negative (checked by <computeroutput>checkForInputErrorsConstruction</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ae8cf84e138983737e044bc1217858021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; built_in_sequence, const int source_type, vector&lt; double &gt; *allocated_treatment_fractions, vector&lt; double &gt; *allocated_fractions, vector&lt; int &gt; *utilities_with_allocations, const vector&lt; double &gt; construction_time_range, double permitting_period, Bond &amp;bond)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>built_in_sequence</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_treatment_fractions</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_fractions</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; *</type>
          <declname>utilities_with_allocations</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>construction_time_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>permitting_period</declname>
        </param>
        <param>
          <type><ref refid="classBond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with detailed allocation settings, construction time, and bond financing. Used when a non-shared water source with multiple stages does not exist in the beginning of the simulation but has a built-in sequence of stages (i.e. low/high). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source (in cubic meters). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source (in cubic meters per week). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>built_in_sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing the construction sequence for this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_treatment_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of fractions of total treatment capacity allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of fractions of total storage capacity allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utilities_with_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of IDs for utilities allocated to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>construction_time_range</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the minimum and maximum construction time range (in years). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permitting_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitting time required for the water source (in years). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bond</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> object representing financing details for this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if permitting or construction time is NaN or negative (checked by <computeroutput>checkForInputErrorsConstruction</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1af9377254ee532ee30eaed78953336b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; connected_sources, vector&lt; int &gt; *utilities_with_allocations, vector&lt; double &gt; *utility_treatment_allocations, const int source_type, const vector&lt; double &gt; construction_time_range, double permitting_period, vector&lt; Bond *&gt; bonds)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; *</type>
          <declname>utilities_with_allocations</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>utility_treatment_allocations</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>construction_time_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>permitting_period</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classBond" kindref="compound">Bond</ref> *&gt;</type>
          <declname>bonds</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with parameters for utility allocations, water quality, and bond financing. Used when a shared water source does not exist in the beginning of the simulation and is of class <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> (uses only <computeroutput>utility_treatment_allocations</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utilities_with_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of IDs for utilities allocated to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utility_treatment_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of treatment capacities allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>construction_time_range</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the minimum and maximum construction time range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permitting_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitting time required for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> objects associated with financing this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if permitting or construction time is NaN or negative (checked by <computeroutput>checkForInputErrorsConstruction</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a5d02f9dc15b18572bbfa945aeec4dbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const char *name, const int id, const vector&lt; Catchment *&gt; &amp;catchments, const double capacity, double treatment_capacity, vector&lt; int &gt; connected_sources, vector&lt; int &gt; *utilities_with_allocations, vector&lt; double &gt; *utility_supply_allocations, vector&lt; double &gt; *utility_treatment_allocations, const int source_type, const vector&lt; double &gt; construction_time_range, double permitting_period, vector&lt; Bond *&gt; bonds)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classCatchment" kindref="compound">Catchment</ref> *&gt; &amp;</type>
          <declname>catchments</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>treatment_capacity</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>connected_sources</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; *</type>
          <declname>utilities_with_allocations</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>utility_supply_allocations</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>utility_treatment_allocations</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>source_type</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>construction_time_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>permitting_period</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classBond" kindref="compound">Bond</ref> *&gt;</type>
          <declname>bonds</declname>
        </param>
        <briefdescription>
<para>This constructor initializes a <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with comprehensive parameters, including utility supply and treatment allocations, water quality management, and bond financing. Used when a shared water source does not exist in the beginning of the simulation and is of class <computeroutput><ref refid="classAllocatedIntake" kindref="compound">AllocatedIntake</ref></computeroutput> or <computeroutput>Expansion</computeroutput> (uses <computeroutput>utility_supply_allocations</computeroutput> and <computeroutput>utility_treatment_allocations</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier for the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catchments</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classCatchment" kindref="compound">Catchment</ref></computeroutput> objects associated with this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total storage capacity of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The total treatment capacity of the water source. <linebreak/>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected_sources</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of IDs representing sources connected to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utilities_with_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of IDs for utilities allocated to this water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utility_supply_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of supply capacities allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utility_treatment_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of treatment capacities allocated to utilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of water source (e.g., reservoir, river, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>construction_time_range</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the minimum and maximum construction time range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permitting_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The permitting time required for the water source . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> objects associated with financing this water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if permitting or construction time is NaN or negative (checked by <computeroutput>checkForInputErrorsConstruction</computeroutput>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aaa3aba0a9709cc1432f85f443b033a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WaterSource::WaterSource</definition>
        <argsstring>(const WaterSource &amp;water_source)</argsstring>
        <name>WaterSource</name>
        <param>
          <type>const <ref refid="classWaterSource" kindref="compound">WaterSource</ref> &amp;</type>
          <declname>water_source</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This constructor creates a copy of an existing <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>water_source</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to be copied.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object that is a copy of the provided <computeroutput>water_source</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aa3b9261264152782c3115d2f563f1caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual WaterSource::~WaterSource</definition>
        <argsstring>()</argsstring>
        <name>~WaterSource</name>
        <briefdescription>
<para>Destructor for the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> class. </para>        </briefdescription>
        <detaileddescription>
<para>This destructor cleans up dynamically allocated memory for the <computeroutput><ref refid="classBond" kindref="compound">Bond</ref></computeroutput> objects associated with the water source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1af10a33e286cf44b362984ff8d8053c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classWaterSource" kindref="compound">WaterSource</ref> &amp;</type>
        <definition>WaterSource&amp; WaterSource::operator=</definition>
        <argsstring>(const WaterSource &amp;water_source)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classWaterSource" kindref="compound">WaterSource</ref> &amp;</type>
          <declname>water_source</declname>
        </param>
        <briefdescription>
<para>Assignment operator for the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> class. </para>        </briefdescription>
        <detaileddescription>
<para>This operator assigns the values of one <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to another, making a deep copy of the relevant data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>water_source</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object whose data is being assigned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object after the assignment. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1accb044cc78f9a444ca18bf7283b5b596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WaterSource::operator&lt;</definition>
        <argsstring>(const WaterSource *other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classWaterSource" kindref="compound">WaterSource</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Less-than operator for comparing two <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> objects by their <computeroutput>id</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This operator compares the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with that of another <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to determine their relative order.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to be compared with the current object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object is less than the <computeroutput>id</computeroutput> of the <computeroutput>other</computeroutput> object, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a9db800769891e1f49d74a78298f4dac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WaterSource::operator&gt;</definition>
        <argsstring>(const WaterSource *other)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classWaterSource" kindref="compound">WaterSource</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Greater-than operator for comparing two <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> objects by their <computeroutput>id</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This operator compares the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object with that of another <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to determine their relative order.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to be compared with the current object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object is greater than the <computeroutput>id</computeroutput> of the <computeroutput>other</computeroutput> object, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1af25e06ec954898f3392cb125d2f2c2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WaterSource::operator==</definition>
        <argsstring>(const WaterSource *other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classWaterSource" kindref="compound">WaterSource</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality operator for comparing two <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> objects by their <computeroutput>id</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This operator checks if the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object is equal to the <computeroutput>id</computeroutput> of another <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object to be compared with the current object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput>id</computeroutput> of the current <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object is equal to the <computeroutput>id</computeroutput> of the <computeroutput>other</computeroutput> object, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a1137cd86f8d3f8a48ebec54282132993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::continuityWaterSource</definition>
        <argsstring>(int week, double upstream_source_inflow, double wastewater_inflow, vector&lt; double &gt; &amp;demand_outflow)</argsstring>
        <name>continuityWaterSource</name>
        <param>
          <type>int</type>
          <declname>week</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upstream_source_inflow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>wastewater_inflow</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>demand_outflow</declname>
        </param>
        <briefdescription>
<para>Manages the continuity of a water source by either applying continuity or bypassing it. </para>        </briefdescription>
        <detaileddescription>
<para>This function checks if the water source is online and, depending on the status, either applies continuity or bypasses the process.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>week</parametername>
</parameternamelist>
<parameterdescription>
<para>The current week of the simulation or process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upstream_source_inflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The inflow of water from the upstream source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wastewater_inflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The inflow of wastewater to the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>demand_outflow</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a vector that will store the demand outflow values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ac2bc1a09fce3a3201d62a73052b27b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::addTreatmentCapacity</definition>
        <argsstring>(const double added_treatment_capacity, int utility_id)</argsstring>
        <name>addTreatmentCapacity</name>
        <reimplementedby refid="classAllocatedIntake_1ae16939ed474e15b9c68edcbf61696231">addTreatmentCapacity</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1ab781bee3253277f1dcfa4c12756d9d6f">addTreatmentCapacity</reimplementedby>
        <param>
          <type>const double</type>
          <declname>added_treatment_capacity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Adds treatment capacity to the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function increases the total treatment capacity of the water source by a specified amount. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>added_treatment_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional treatment capacity to be added to the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility requesting the capacity addition (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a4a4d948033c57feb8523bd7d5828c59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::removeWater</definition>
        <argsstring>(int allocation_id, double volume)</argsstring>
        <name>removeWater</name>
        <reimplementedby refid="classAllocatedReservoir_1a3a9b7ce2e1d42cc373095cfd40ef2ae2">removeWater</reimplementedby>
        <param>
          <type>int</type>
          <declname>allocation_id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>volume</declname>
        </param>
        <briefdescription>
<para>Removes water from the water source and updates demand. </para>        </briefdescription>
        <detaileddescription>
<para>This function decreases the available volume of water in the source by the specified volume and increases the total demand and policy-added demand accordingly. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocation_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the allocation from which the water is being removed (UNUSED). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>volume</parametername>
</parameternamelist>
<parameterdescription>
<para>The volume of water to be removed from the water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ab869abb3d3dde1875e933482bedc3ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::addCapacity</definition>
        <argsstring>(double capacity, int utility_id)</argsstring>
        <name>addCapacity</name>
        <reimplementedby refid="classAllocatedIntake_1a32a52eb269d4de861cc844633eceefb0">addCapacity</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1a191cf4347eb2ea57b203c102f8fc805e">addCapacity</reimplementedby>
        <param>
          <type>double</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Adds capacity to the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function increases the capacity of the water source by a specified amount. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional capacity to be added to the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility requesting the capacity addition (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aaa55dc6e14ff184380300147b53c56ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::setOnline</definition>
        <argsstring>()</argsstring>
        <name>setOnline</name>
        <reimplementedby refid="classQuarry_1af5fe04fa188d399485b2b4e64381e169">setOnline</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1a739d93f7981f597a3db0a3d613304b8e">setOnline</reimplementedby>
        <reimplementedby refid="classReservoir_1ac6f64dd92c401e58095e7b125855041b">setOnline</reimplementedby>
        <briefdescription>
<para>Sets the water source to be online. </para>        </briefdescription>
        <detaileddescription>
<para>This is a virtual function that can be overridden by subclasses.</para><para>This function changes the status of the water source to online, enabling its operations.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ad8496aea2d4ff97c8069b61cc984c799" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool WaterSource::skipConstruction</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>skipConstruction</name>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Determines whether the construction of the water source should be skipped. </para>        </briefdescription>
        <detaileddescription>
<para>This function always returns <computeroutput>false</computeroutput>, indicating that the construction of the water source cannot be skipped. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility requesting to skip construction (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput>, indicating that the construction cannot be skipped. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ad4667296dc6b6dabc36b871529ca2749" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAvailableAllocatedVolume</definition>
        <argsstring>(int utility_id)</argsstring>
        <name>getAvailableAllocatedVolume</name>
        <reimplementedby refid="classAllocatedIntake_1a9c6161b8dd13b6ea70a9dafbb72afc91">getAvailableAllocatedVolume</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1ae161ebfc285aa69cb8b7f4fe20ee7a2e">getAvailableAllocatedVolume</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the available allocated volume for a specific utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the available allocated volume for the given utility ID. In its current implementation, it returns the total available volume, as the functionality to allocate volumes to different utilities has not been implemented. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the available allocated volume is being requested (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The available allocated volume for the specified utility. In the current implementation, this is equivalent to the total available volume. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1acb9e57253157c969fa57fc6e7b35ab68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAvailableVolume</definition>
        <argsstring>() const</argsstring>
        <name>getAvailableVolume</name>
        <briefdescription>
<para>Retrieves the available volume of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This is a virtual function that can be overridden by subclasses.</para><para>This function returns the current available volume of the water source, which represents the amount of water that is currently available for allocation or usage.</para><para><simplesect kind="return"><para>The available volume of the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a86999f23ec7f4fb518adb88e16f156a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::setFull</definition>
        <argsstring>()</argsstring>
        <name>setFull</name>
        <reimplementedby refid="classAllocatedReservoir_1aea294cbca1e1630a1307072632d14b05">setFull</reimplementedby>
        <briefdescription>
<para>Sets the water source to its full capacity. </para>        </briefdescription>
        <detaileddescription>
<para>This is a virtual function that can be overridden by subclasses.</para><para>This function sets the available volume of the water source to its full capacity, indicating that the source is completely filled and no further volume can be added until some is used or allocated.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aeefcddb0119d5aab95dab03912a65cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getSupplyCapacity</definition>
        <argsstring>()</argsstring>
        <name>getSupplyCapacity</name>
        <briefdescription>
<para>Retrieves the available supply capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This is a virtual function that can be overridden by subclasses.</para><para>This function calculates and returns the available supply capacity of the water source, taking into account any allocations to the water quality pool (if initialized). If the water quality pool is not initialized, it returns the total capacity of the water source.</para><para><simplesect kind="return"><para>The available supply capacity of the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1af7607924825ffe293179b09fe1bc466e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getMin_environmental_outflow</definition>
        <argsstring>() const</argsstring>
        <name>getMin_environmental_outflow</name>
        <briefdescription>
<para>Retrieves the minimum environmental outflow for the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the minimum environmental outflow, which is a threshold value representing the minimum amount of water that must be released from the water source to maintain environmental standards.</para><para><simplesect kind="return"><para>The minimum environmental outflow of the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a406246432d29f49189d53207ab1d895a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::setMin_environmental_outflow</definition>
        <argsstring>(double min_environmental_outflow)</argsstring>
        <name>setMin_environmental_outflow</name>
        <param>
          <type>double</type>
          <declname>min_environmental_outflow</declname>
        </param>
        <briefdescription>
<para>Sets the minimum environmental outflow for the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function sets the minimum environmental outflow, which represents the minimum amount of water that must be released from the water source to maintain ecological standards.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_environmental_outflow</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set for the minimum environmental outflow.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a1e28dee97f62fbb9845300fc2768d172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const vector&lt; int &gt; &amp;</type>
        <definition>const vector&lt;int&gt;&amp; WaterSource::getBuilt_in_sequence</definition>
        <argsstring>() const</argsstring>
        <name>getBuilt_in_sequence</name>
        <briefdescription>
<para>Gets the sequence (vector) of water sources to be built consecutively. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a reference to the vector containing the built-in sequence, which represents the order in which sources or utilities are connected or initialized in the system.</para><para><simplesect kind="return"><para>A constant reference to the vector containing the built-in sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a7678e05e3e73b927c0b47e3041d7415f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getTotal_outflow</definition>
        <argsstring>() const</argsstring>
        <name>getTotal_outflow</name>
        <briefdescription>
<para>Retrieves the total outflow from the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total outflow from the water source, which represents the sum of all the water leaving the source, including outflows to utilities and environmental requirements.</para><para><simplesect kind="return"><para>The total outflow from the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a130fd661ff31c53115cca23e4e2f210a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WaterSource::isOnline</definition>
        <argsstring>() const</argsstring>
        <name>isOnline</name>
        <briefdescription>
<para>Checks if the water source is online. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a boolean indicating whether the water source is online and operational.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the water source is online, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ab53d376a425b8db603382ba27b52b1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::setOutflow_previous_week</definition>
        <argsstring>(double outflow_previous_week)</argsstring>
        <name>setOutflow_previous_week</name>
        <param>
          <type>double</type>
          <declname>outflow_previous_week</declname>
        </param>
        <briefdescription>
<para>Sets the total outflow for the previous week. </para>        </briefdescription>
        <detaileddescription>
<para>This function updates the total outflow of the water source to the value provided for the previous week. This is used to track and record outflows from the water source on a weekly basis.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outflow_previous_week</parametername>
</parameternamelist>
<parameterdescription>
<para>The outflow value for the previous week to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ad7e60efd7395f8d3e674e602226e5ac1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getUpstream_source_inflow</definition>
        <argsstring>() const</argsstring>
        <name>getUpstream_source_inflow</name>
        <briefdescription>
<para>Retrieves the upstream source inflow. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the current upstream inflow to the water source, which is the volume of water entering the source from upstream sources. This value is crucial for determining the availability of water for further allocation and usage.</para><para><simplesect kind="return"><para>The upstream source inflow in cubic units (e.g., cubic meters). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ac57d6b292490333b5bc14233bce326ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getDemand</definition>
        <argsstring>() const</argsstring>
        <name>getDemand</name>
        <briefdescription>
<para>Retrieves the total demand for the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total demand placed on the water source, which is the total volume of water required by various users or systems connected to the source.</para><para><simplesect kind="return"><para>The total demand from all utilities sharing the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1afd2a153ba8f4ecaa9f8fa851d5a1727c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getUpstreamCatchmentInflow</definition>
        <argsstring>() const</argsstring>
        <name>getUpstreamCatchmentInflow</name>
        <briefdescription>
<para>Retrieves the upstream catchment inflow. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the current inflow to the water source from upstream catchments. It represents the volume of water entering the source from the catchment areas upstream of the water source.</para><para><simplesect kind="return"><para>The upstream catchment inflow in cubic units (e.g., cubic meters). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a634904c510b16de6d7c057fed6d6e625" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::setRealization</definition>
        <argsstring>(unsigned long r, vector&lt; double &gt; &amp;rdm_factors)</argsstring>
        <name>setRealization</name>
        <reimplementedby refid="classAllocatedIntake_1afc73ae38f23417cfbece54c4c3d4ccc9">setRealization</reimplementedby>
        <reimplementedby refid="classIntake_1a879c4c780a4d21606e848f57464cf3b6">setRealization</reimplementedby>
        <reimplementedby refid="classReservoir_1ad1bb7aa46397719d09e0b6188b9bc28d">setRealization</reimplementedby>
        <param>
          <type>unsigned long</type>
          <declname>r</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>rdm_factors</declname>
        </param>
        <briefdescription>
<para>Sets the timeseries corresponding to the realization of the water source based on random factors. </para>        </briefdescription>
        <detaileddescription>
<para>This function updates the water source&apos;s properties, including catchment inflow, permitting time, and construction cost overruns based on the given realization index (<computeroutput>r</computeroutput>) and randomization factors (<computeroutput>rdm_factors</computeroutput>). The function applies the random factors to the catchments, permitting time, and bonds associated with the water source. This function is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The realization index, which is used to apply different realizations of the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rdm_factors</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of DU factors, where each entry corresponds to a specific property of the water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ad218f2a603d7ebce268d800e0249a74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAllocatedCapacity</definition>
        <argsstring>(int utility_id)</argsstring>
        <name>getAllocatedCapacity</name>
        <reimplementedby refid="classAllocatedIntakeExpansion_1a6cd2dabeb1dc1e0417082c032620ce51">getAllocatedCapacity</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1a8b9b38494fa23f0bea78134c82644bf1">getAllocatedCapacity</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the allocated capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total capacity of the water source, which can be allocated to a utility. The function does not currently account for any specific allocation per utility, returning the full capacity. This function is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility requesting the allocated capacity. (Currently not used in the function.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total capacity of the water source, represented as a double. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1acec9b1fef81a9b73c4517409438452ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAllocatedFraction</definition>
        <argsstring>(int utility_id)</argsstring>
        <name>getAllocatedFraction</name>
        <reimplementedby refid="classAllocatedReservoir_1a731381982c9245b0bf24db4082dc74c1">getAllocatedFraction</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the allocated fraction of the water source for a specific utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the fraction of the water source&apos;s capacity allocated to a utility. In its current implementation, the function returns a fixed value of 1.0, indicating full allocation to the utility. This function is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility requesting the allocated fraction. (Currently not used in the function.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The fraction of the total water source capacity allocated to the utility, represented as a double (always 1.0). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a00b156a153fc24097e4c8a4e5c46c4e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getEvaporated_volume</definition>
        <argsstring>() const</argsstring>
        <name>getEvaporated_volume</name>
        <briefdescription>
<para>Retrieves the total evaporated volume of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total volume of water that has evaporated from the water source. The value represents the accumulated evaporated volume for the water source over time.</para><para><simplesect kind="return"><para>The total evaporated volume, represented as a double. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ab98528c4d2e6ecd14cb2c813b1d445c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAllocatedTreatmentCapacity</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>getAllocatedTreatmentCapacity</name>
        <reimplementedby refid="classAllocatedIntakeExpansion_1a20fb863c5e0bce30c10d1791b037a57a">getAllocatedTreatmentCapacity</reimplementedby>
        <reimplementedby refid="classAllocatedReservoir_1aba81b93e1aa1154ce411248903fabde6">getAllocatedTreatmentCapacity</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the allocated treatment capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total treatment capacity allocated to the water source. The value represents the total treatment capacity available for use by the water source. This function is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The utility identifier for which the treatment capacity is requested (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The allocated treatment capacity, represented as a double. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a6228c9aee407ca2544753dbd2792c5fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getTotal_treatment_capacity</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>getTotal_treatment_capacity</name>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>Retrieves the total treatment capacity of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the total treatment capacity allocated to the water source. The value represents the overall treatment capacity available for use by the water source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The utility identifier for which the total treatment capacity is requested.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total treatment capacity, represented as a double. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ac834762e016e796968ad286feeca7be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::setAllocations</definition>
        <argsstring>(vector&lt; int &gt; *utilities_with_allocations, vector&lt; double &gt; *allocated_fractions, vector&lt; double &gt; *allocated_treatment_fractions)</argsstring>
        <name>setAllocations</name>
        <param>
          <type>vector&lt; int &gt; *</type>
          <declname>utilities_with_allocations</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_fractions</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; *</type>
          <declname>allocated_treatment_fractions</declname>
        </param>
        <briefdescription>
<para>Sets the allocations for utilities in the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function takes in vectors of utilities, allocated fractions, and treatment fractions, and sets the allocation for the water source. It validates that the fractions sum up to 1.0, assigns the appropriate values to the allocation vectors, and checks that no treatment capacity is allocated to the water quality pool.</para><para>Initial set up of allocations with full reservoir in the beginning of the simulations. To be used in constructors only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utilities_with_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of utility IDs that have allocations to the water source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of fractions of the water source&apos;s total capacity allocated for each utility. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_treatment_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of fractions of the water source&apos;s treatment capacity allocated for each utility.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if any of the following conditions are not met:<itemizedlist>
<listitem><para>The size of <computeroutput>utilities_with_allocations</computeroutput> does not match the size of <computeroutput>allocated_fractions</computeroutput>.</para></listitem><listitem><para>The sum of <computeroutput>allocated_fractions</computeroutput> is less than or greater than 1.0.</para></listitem><listitem><para>A treatment capacity is allocated to the water quality pool.</para></listitem><listitem><para>The sizes of <computeroutput>utilities_with_allocations</computeroutput>, <computeroutput>allocated_fractions</computeroutput>, and <computeroutput>allocated_treatment_fractions</computeroutput> are inconsistent. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="764" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1afe2f6b96383abdb14563db279a261a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void WaterSource::resetAllocations</definition>
        <argsstring>(const vector&lt; double &gt; *new_allocated_fractions)</argsstring>
        <name>resetAllocations</name>
        <reimplementedby refid="classVariableJointWTP_1ab02c6701ad5120e189023b038bae13b7">resetAllocations</reimplementedby>
        <param>
          <type>const vector&lt; double &gt; *</type>
          <declname>new_allocated_fractions</declname>
        </param>
        <briefdescription>
<para>Resets the allocations for utilities in the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function resets the allocation fractions and recalculates the corresponding capacities and available volumes for each utility. The water quality pool allocation is handled by the <computeroutput>wq_pool_id</computeroutput>. The updated allocation fractions are applied to the existing allocation data. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_allocated_fractions</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a vector of new allocation fractions for each utility.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ae29ed4aa2b9c97c5a41772daf4631f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::setAvailableAllocatedVolumes</definition>
        <argsstring>(vector&lt; double &gt; available_allocated_volumes, double available_volume)</argsstring>
        <name>setAvailableAllocatedVolumes</name>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>available_allocated_volumes</declname>
        </param>
        <param>
          <type>double</type>
          <declname>available_volume</declname>
        </param>
        <briefdescription>
<para>Sets the available allocated volumes to each utility and available volume from the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function updates the available allocated volumes for each utility and the total available volume for the water source. If <computeroutput>utilities_with_allocations</computeroutput> is not null, the allocated volumes will be updated accordingly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>available_allocated_volumes</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the available allocated volumes for each utility. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>available_volume</parametername>
</parameternamelist>
<parameterdescription>
<para>The total available volume of the water source.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="795" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a9a87dafd08834147bcf5004bc3907824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::getAvailable_allocated_volumes</definition>
        <argsstring>() const</argsstring>
        <name>getAvailable_allocated_volumes</name>
        <briefdescription>
<para>Returns the available allocated volumes for the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the available allocated volumes for each utility that has an allocation in the water source.</para><para><simplesect kind="return"><para>A vector of available allocated volumes for each utility. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a41a9f1fb088f29633c9141687958c16e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; int &gt; *</type>
        <definition>vector&lt;int&gt;* WaterSource::getUtilities_with_allocations</definition>
        <argsstring>() const</argsstring>
        <name>getUtilities_with_allocations</name>
        <briefdescription>
<para>Returns the IDs of the utilities with allocations for the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the list of utilities that have allocations in the water source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a vector of utility IDs that have allocations in the water source. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aee22325e6af0e3c804ddbd9a3505be05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getWastewater_inflow</definition>
        <argsstring>() const</argsstring>
        <name>getWastewater_inflow</name>
        <briefdescription>
<para>Returns the wastewater inflow to the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the amount of wastewater inflow currently associated with the water source.</para><para><simplesect kind="return"><para>The wastewater inflow as a double value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="826" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aa21d3f1c87ced40c2b673d9e43d99176" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getPermitting_period</definition>
        <argsstring>() const</argsstring>
        <name>getPermitting_period</name>
        <briefdescription>
<para>Returns the permitting period of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function retrieves the permitting period for the water source, which defines the time required for permitting operations to be completed for the water source.</para><para><simplesect kind="return"><para>The permitting period as a double value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1af6445a2dd3764907bcb9a37d4647f910" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getAvailableSupplyVolume</definition>
        <argsstring>() const</argsstring>
        <name>getAvailableSupplyVolume</name>
        <briefdescription>
<para>Returns the available supply volume of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function calculates the available supply volume by subtracting the allocated volumes for the water quality pool from the total available volume, if the water quality pool is initialized. If the water quality pool is not initialized, it simply returns the total available volume.</para><para><simplesect kind="return"><para>The available supply volume as a double value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a63b1a410b47710db049e2b2e9c3c39a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double WaterSource::getAllocatedInflow</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>getAllocatedInflow</name>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>This function returns the allocated inflow for a given utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function checks if the water quality pool ID is initialized. If it is not, it returns the upstream catchment inflow. If it is initialized, the function returns the fraction of inflow from the upstream catchment and allocates it to the specified utility.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the allocated inflow is being calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The allocated inflow for the specified utility. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="859" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a484bca192a9e3aacaad47db0afb8fbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getSupplyAllocatedFraction</definition>
        <argsstring>(int utility_id)</argsstring>
        <name>getSupplyAllocatedFraction</name>
        <reimplementedby refid="classAllocatedReservoir_1a114e9cde6a106b786ca0ed39283cbbed">getSupplyAllocatedFraction</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>This function returns the supply allocated fraction for a given utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function currently returns a constant value of <computeroutput>1.0</computeroutput> for any given utility ID, indicating that the entire supply is allocated to the utility. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the supply allocated fraction is being calculated (UNSUED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The supply allocated fraction (always 1.0). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="871" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1acacef71453819480c5438ae5b433e66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBond" kindref="compound">Bond</ref> &amp;</type>
        <definition>virtual Bond&amp; WaterSource::getBond</definition>
        <argsstring>(int utility_id)</argsstring>
        <name>getBond</name>
        <reimplementedby refid="classAllocatedIntakeExpansion_1a3091edd0793cf2bd4e01fc178ae72ffb">getBond</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>This function returns the bond associated with a given utility ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function checks the size of the <computeroutput>bonds</computeroutput> collection. If the collection contains only one bond, it returns the first bond. Otherwise, it returns the bond corresponding to the specified <computeroutput>utility_id</computeroutput>. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the bond is being retrieved.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bond associated with the specified utility ID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a47bc2006a1ef6ea4429d56a24319940f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::checkForInputErrorsConstruction</definition>
        <argsstring>()</argsstring>
        <name>checkForInputErrorsConstruction</name>
        <briefdescription>
<para>This function checks for input errors related to the permitting and construction times for a water source. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Void</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the permitting time or construction time is invalid (NaN or negative). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1aebc6985952d3e69f0d8ae1d0498a1ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int WaterSource::randomConstructionTime</definition>
        <argsstring>(double t0, double tf)</argsstring>
        <name>randomConstructionTime</name>
        <param>
          <type>double</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
<para>This function generates a random construction time between the specified time bounds, converted to weeks. </para>        </briefdescription>
        <detaileddescription>
<para>This function uses a random number generator to produce a random value within the range <computeroutput>[t0, tf]</computeroutput> (in years). The result is then scaled by the constant <computeroutput>WEEKS_IN_YEAR</computeroutput> to convert it into weeks. The function also incorporates a seeded random number generator based on either the <computeroutput>id</computeroutput> and <computeroutput>seed</computeroutput> or a fresh random device if <computeroutput>seed</computeroutput> is not properly initialized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound of the construction time range (in years). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound of the construction time range (in years).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The random construction time (in weeks). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ac1e8880f0aeb56b2728e253d3500ef40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const double</type>
        <definition>const double WaterSource::getConstruction_time</definition>
        <argsstring>() const</argsstring>
        <name>getConstruction_time</name>
        <briefdescription>
<para>This function returns the construction time of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function simply returns the value of the <computeroutput>construction_time</computeroutput> member, which represents the total time required for construction, typically measured in weeks.</para><para><simplesect kind="return"><para>The construction time (in weeks). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a00a432eba75eaae7195338a8514ac853" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getPrioritySourcePotentialVolume</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>getPrioritySourcePotentialVolume</name>
        <reimplementedby refid="classAllocatedIntake_1abbea26f2adac6c9f9e3bdcdf1aead55d">getPrioritySourcePotentialVolume</reimplementedby>
        <reimplementedby refid="classIntake_1a8d1fc6855451f3dff1a2f0efcd5da8ee">getPrioritySourcePotentialVolume</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>This function returns the potential volume of the priority source for a given utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function currently returns a constant value of <computeroutput>0.0</computeroutput>, indicating that the priority source has no potential volume. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the priority source potential volume is being retrieved (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The potential volume of the priority source (always 0.0). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1add1082429d114b41cb9e3afaa623aeb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int WaterSource::getAgreementType</definition>
        <argsstring>() const</argsstring>
        <name>getAgreementType</name>
        <reimplementedby refid="classJointWTP_1a4580529f08f6499def6aae2655484e48">getAgreementType</reimplementedby>
        <briefdescription>
<para>This function retrieves the agreement type of the water source. </para>        </briefdescription>
        <detaileddescription>
<para>This function is designed to be called only by the <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> class or its child classes. If called from any other context, it throws a <computeroutput>logic_error</computeroutput> indicating that the agreement type cannot be accessed. The function will return a default error code (<computeroutput>9999</computeroutput>) after throwing the exception. This is a virtual function that can be overridden by subclasses.</para><para><simplesect kind="return"><para>The agreement type (always returns <computeroutput>9999</computeroutput> after throwing an error).</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If called outside the <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> class or its child classes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a506c77317ae84db0a4d9ea2cd74ddb11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>virtual int WaterSource::getParentWaterSourceID</definition>
        <argsstring>() const</argsstring>
        <name>getParentWaterSourceID</name>
        <reimplementedby refid="classJointWTP_1ae4805e616725c109f23c0513d6ef2711">getParentWaterSourceID</reimplementedby>
        <briefdescription>
<para>This function retrieves the parent water source ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function is intended to be called only through an override in the <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> class. If called from any other context, it throws a <computeroutput>logic_error</computeroutput> indicating that the parent water source ID should only be accessed through the <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> class or its child classes. The function will return a default error code (<computeroutput>-999</computeroutput>) after throwing the exception. This is a virtual function that can be overridden by subclasses.</para><para><simplesect kind="return"><para>The parent water source ID (always returns <computeroutput>-999</computeroutput> after throwing an error).</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If called outside the <computeroutput><ref refid="classJointWTP" kindref="compound">JointWTP</ref></computeroutput> class or its child classes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="980" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1adfc85c196cfc262d4b463e87c459eb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::resetTreatmentAllocations</definition>
        <argsstring>(const vector&lt; double &gt; current_treatment_allocations, const vector&lt; double &gt; new_treatment_allocations)</argsstring>
        <name>resetTreatmentAllocations</name>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>current_treatment_allocations</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>new_treatment_allocations</declname>
        </param>
        <briefdescription>
<para>This function resets the treatment allocations for each utility based on the provided current and new treatment allocations. </para>        </briefdescription>
        <detaileddescription>
<para>This function calculates the change in treatment capacities for each utility and updates the <computeroutput>allocated_treatment_capacities</computeroutput> accordingly. It also ensures that there are no negative capacities and adjusts for any over-allocation by normalizing the treatment fractions to ensure that the total treatment capacity is not exceeded.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_treatment_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of current treatment allocations for each utility. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_treatment_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of new treatment allocations for each utility.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a48df9ae09a8a7844beb18c35382adba1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::getAllocatedTreatmentCapacities</definition>
        <argsstring>() const</argsstring>
        <name>getAllocatedTreatmentCapacities</name>
        <briefdescription>
<para>This function returns the vector of allocated treatment capacities to relevant utilities. </para>        </briefdescription>
        <detaileddescription>
<para>This function provides access to the <computeroutput>allocated_treatment_capacities</computeroutput> member, which contains the treatment capacities allocated to each utility. The returned vector holds the allocated capacities for all utilities that have allocations.</para><para><simplesect kind="return"><para>A vector containing the allocated treatment capacities for each utility. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1abc7034b8c78e45d7b1fa4bd13b8a3bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WaterSource::setTreatmentAllocations</definition>
        <argsstring>(const vector&lt; double &gt; treatment_capacity_allocations)</argsstring>
        <name>setTreatmentAllocations</name>
        <param>
          <type>const vector&lt; double &gt;</type>
          <declname>treatment_capacity_allocations</declname>
        </param>
        <briefdescription>
<para>This function sets the treatment allocations for each utility based on the provided treatment capacity allocations. </para>        </briefdescription>
        <detaileddescription>
<para>This function updates the <computeroutput>allocated_treatment_capacities</computeroutput> member with the provided treatment capacity allocations for each utility. It then calculates the treatment fractions for each utility based on the updated treatment capacities and the total treatment capacity. Note: Over-allocation checks are not performed in this function, as they are handled elsewhere.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>treatment_capacity_allocations</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of treatment capacity allocations for each utility.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1ad943083d8b3bee60ad8d106bba8a5faa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double WaterSource::getAllocatedTreatmentFraction</definition>
        <argsstring>(int utility_id) const</argsstring>
        <name>getAllocatedTreatmentFraction</name>
        <reimplementedby refid="classJointWTP_1a3c661704dec4c92b8c16f28e39ca533e">getAllocatedTreatmentFraction</reimplementedby>
        <param>
          <type>int</type>
          <declname>utility_id</declname>
        </param>
        <briefdescription>
<para>This function returns the allocated treatment fraction for a given utility. </para>        </briefdescription>
        <detaileddescription>
<para>This function currently returns a constant value of <computeroutput>1.0</computeroutput>, indicating that the treatment fraction for any utility is set to 100%. This is a virtual function that can be overridden by subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>utility_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the utility for which the treatment fraction is being retrieved (UNUSED).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The allocated treatment fraction (always 1.0). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a9d85cbca88eefd54fda383237807470d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int WaterSource::getWaterQualityPoolID</definition>
        <argsstring>() const</argsstring>
        <name>getWaterQualityPoolID</name>
        <briefdescription>
<para>This function returns the water quality pool ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function provides access to the <computeroutput>wq_pool_id</computeroutput> member, which represents the identifier of the water quality pool associated with the water source.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The water quality pool ID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="1040" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a4b05ca30a659ff351e75c487f31ff847" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; WaterSource::getAllocatedSupplyCapacities</definition>
        <argsstring>() const</argsstring>
        <name>getAllocatedSupplyCapacities</name>
        <briefdescription>
<para>This function returns the vector of allocated supply capacities. </para>        </briefdescription>
        <detaileddescription>
<para>This function provides access to the <computeroutput>allocated_capacities</computeroutput> member, which contains the supply capacities allocated to each utility. The returned vector holds the allocated supply capacities for all utilities that have allocations.</para><para><simplesect kind="return"><para>A vector containing the allocated supply capacities for each utility. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="1050" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classWaterSource_1a25d4ad4251b78267618b2f0ef5a501dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool WaterSource::compare</definition>
        <argsstring>(WaterSource *lhs, WaterSource *rhs)</argsstring>
        <name>compare</name>
        <param>
          <type><ref refid="classWaterSource" kindref="compound">WaterSource</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classWaterSource" kindref="compound">WaterSource</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compares two water sources based on their ID. </para>        </briefdescription>
        <detaileddescription>
<para>This function compares two instances of <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> based on their <computeroutput>id</computeroutput> attribute. It returns <computeroutput>true</computeroutput> if the ID of the left-hand side water source (<computeroutput>lhs</computeroutput>) is less than that of the right-hand side (<computeroutput>rhs</computeroutput>). This can be useful for sorting or organizing water sources by their ID.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if <computeroutput>lhs-&gt;id</computeroutput> is less than <computeroutput>rhs-&gt;id</computeroutput>, otherwise <computeroutput>false</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a4c8f4c120b9101767b6013a78eb2c5d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void WaterSource::setSeed</definition>
        <argsstring>(int seed)</argsstring>
        <name>setSeed</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>This function sets the seed value for the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para>This function assigns the provided seed value to the <computeroutput>seed</computeroutput> member of the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> class. This seed is used to initialize the random number generator for operations that require randomness, such as generating random construction times.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set for the random number generator seed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classWaterSource_1a04f94831f4816bb277c5a615eace7779" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void WaterSource::unsetSeed</definition>
        <argsstring>()</argsstring>
        <name>unsetSeed</name>
        <briefdescription>
<para>This function unsets the seed value for the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para>This function resets the <computeroutput>seed</computeroutput> member of the <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> class to a non-initialized state, effectively unsetting the seed. This means that any subsequent use of the random number generator will rely on a fresh random device or an unseeded state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="931" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class defines the main <computeroutput><ref refid="classWaterSource" kindref="compound">WaterSource</ref></computeroutput> object that provides basic representation of a general water source for a utility. </para>    </briefdescription>
    <detaileddescription>
<para>Created by bernardo on 1/22/17. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="315">
        <label>Quarry</label>
        <link refid="classQuarry"/>
        <childnode refid="313" relation="public-inheritance">
        </childnode>
      </node>
      <node id="316">
        <label>ReservoirExpansion</label>
        <link refid="classReservoirExpansion"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="309">
        <label>JointWTP</label>
        <link refid="classJointWTP"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="311">
        <label>VariableJointWTP</label>
        <link refid="classVariableJointWTP"/>
        <childnode refid="309" relation="public-inheritance">
        </childnode>
      </node>
      <node id="305">
        <label>AllocatedIntake</label>
        <link refid="classAllocatedIntake"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="310">
        <label>FixedJointWTP</label>
        <link refid="classFixedJointWTP"/>
        <childnode refid="309" relation="public-inheritance">
        </childnode>
      </node>
      <node id="304">
        <label>WaterSource</label>
        <link refid="classWaterSource"/>
      </node>
      <node id="307">
        <label>Intake</label>
        <link refid="classIntake"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="312">
        <label>Relocation</label>
        <link refid="classRelocation"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="313">
        <label>Reservoir</label>
        <link refid="classReservoir"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="314">
        <label>AllocatedReservoir</label>
        <link refid="classAllocatedReservoir"/>
        <childnode refid="313" relation="public-inheritance">
        </childnode>
      </node>
      <node id="308">
        <label>IntakeExpansion</label>
        <link refid="classIntakeExpansion"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="317">
        <label>SequentialJointTreatmentExpansion</label>
        <link refid="classSequentialJointTreatmentExpansion"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="318">
        <label>WaterReuse</label>
        <link refid="classWaterReuse"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="306">
        <label>AllocatedIntakeExpansion</label>
        <link refid="classAllocatedIntakeExpansion"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" line="18" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/SystemComponents/WaterSources/Base/WaterSource.h" bodystart="18" bodyend="1051"/>
    <listofallmembers>
      <member refid="classWaterSource_1ab869abb3d3dde1875e933482bedc3ae3" prot="public" virt="virtual"><scope>WaterSource</scope><name>addCapacity</name></member>
      <member refid="classWaterSource_1ac2bc1a09fce3a3201d62a73052b27b0b" prot="public" virt="virtual"><scope>WaterSource</scope><name>addTreatmentCapacity</name></member>
      <member refid="classWaterSource_1ab94063d51314cfb896010408ae32fa9c" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>allocated_capacities</name></member>
      <member refid="classWaterSource_1a2f6655a80c4847fe039987255d9d998c" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>allocated_fractions</name></member>
      <member refid="classWaterSource_1a87dc0bfb5cf4e2b9a953c7a80058c923" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>allocated_treatment_capacities</name></member>
      <member refid="classWaterSource_1aa73fe10cfc6579b2fb79529e1dde5140" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>allocated_treatment_fractions</name></member>
      <member refid="classWaterSource_1ac070445379fe706f65b977dade4f3fbc" prot="protected" virt="pure-virtual"><scope>WaterSource</scope><name>applyContinuity</name></member>
      <member refid="classWaterSource_1a77d3fe9ea445fc987b07debdfb9e2f5b" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>available_allocated_volumes</name></member>
      <member refid="classWaterSource_1a49e1a191152e344e2161e8db166e067a" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>available_volume</name></member>
      <member refid="classWaterSource_1a413b094e11bdce62f4d82e5bb9e4706e" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>bonds</name></member>
      <member refid="classWaterSource_1a49f9da70a5080abe82160b1a0d194e60" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>built_in_sequence</name></member>
      <member refid="classWaterSource_1abeb8ba4b51c2b270baf9162df76d8b58" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>bypass</name></member>
      <member refid="classWaterSource_1a2ec257b415b248214a8bce7fc5267723" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>capacity</name></member>
      <member refid="classWaterSource_1a8c18c34f23f8a06685c1d12f462ed830" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>catchments</name></member>
      <member refid="classWaterSource_1a47bc2006a1ef6ea4429d56a24319940f" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>checkForInputErrorsConstruction</name></member>
      <member refid="classWaterSource_1a25d4ad4251b78267618b2f0ef5a501dc" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>compare</name></member>
      <member refid="classWaterSource_1ae059fbe3f911a819bac0202f7f45e8e4" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>construction_time</name></member>
      <member refid="classWaterSource_1a1137cd86f8d3f8a48ebec54282132993" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>continuityWaterSource</name></member>
      <member refid="classWaterSource_1a6085899c4b4cc40fa80784203e1a9755" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>evaporated_volume</name></member>
      <member refid="classWaterSource_1add1082429d114b41cb9e3afaa623aeb1" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAgreementType</name></member>
      <member refid="classWaterSource_1ad218f2a603d7ebce268d800e0249a74c" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAllocatedCapacity</name></member>
      <member refid="classWaterSource_1acec9b1fef81a9b73c4517409438452ac" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAllocatedFraction</name></member>
      <member refid="classWaterSource_1a63b1a410b47710db049e2b2e9c3c39a0" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getAllocatedInflow</name></member>
      <member refid="classWaterSource_1a4b05ca30a659ff351e75c487f31ff847" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getAllocatedSupplyCapacities</name></member>
      <member refid="classWaterSource_1a48df9ae09a8a7844beb18c35382adba1" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getAllocatedTreatmentCapacities</name></member>
      <member refid="classWaterSource_1ab98528c4d2e6ecd14cb2c813b1d445c6" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAllocatedTreatmentCapacity</name></member>
      <member refid="classWaterSource_1ad943083d8b3bee60ad8d106bba8a5faa" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAllocatedTreatmentFraction</name></member>
      <member refid="classWaterSource_1a9a87dafd08834147bcf5004bc3907824" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getAvailable_allocated_volumes</name></member>
      <member refid="classWaterSource_1ad4667296dc6b6dabc36b871529ca2749" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAvailableAllocatedVolume</name></member>
      <member refid="classWaterSource_1af6445a2dd3764907bcb9a37d4647f910" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getAvailableSupplyVolume</name></member>
      <member refid="classWaterSource_1acb9e57253157c969fa57fc6e7b35ab68" prot="public" virt="virtual"><scope>WaterSource</scope><name>getAvailableVolume</name></member>
      <member refid="classWaterSource_1acacef71453819480c5438ae5b433e66b" prot="public" virt="virtual"><scope>WaterSource</scope><name>getBond</name></member>
      <member refid="classWaterSource_1a1e28dee97f62fbb9845300fc2768d172" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getBuilt_in_sequence</name></member>
      <member refid="classWaterSource_1ac1e8880f0aeb56b2728e253d3500ef40" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getConstruction_time</name></member>
      <member refid="classWaterSource_1ac57d6b292490333b5bc14233bce326ce" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getDemand</name></member>
      <member refid="classWaterSource_1a00b156a153fc24097e4c8a4e5c46c4e0" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getEvaporated_volume</name></member>
      <member refid="classWaterSource_1af7607924825ffe293179b09fe1bc466e" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getMin_environmental_outflow</name></member>
      <member refid="classWaterSource_1a506c77317ae84db0a4d9ea2cd74ddb11" prot="public" virt="virtual"><scope>WaterSource</scope><name>getParentWaterSourceID</name></member>
      <member refid="classWaterSource_1aa21d3f1c87ced40c2b673d9e43d99176" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getPermitting_period</name></member>
      <member refid="classWaterSource_1a00a432eba75eaae7195338a8514ac853" prot="public" virt="virtual"><scope>WaterSource</scope><name>getPrioritySourcePotentialVolume</name></member>
      <member refid="classWaterSource_1a484bca192a9e3aacaad47db0afb8fbdd" prot="public" virt="virtual"><scope>WaterSource</scope><name>getSupplyAllocatedFraction</name></member>
      <member refid="classWaterSource_1aeefcddb0119d5aab95dab03912a65cad" prot="public" virt="virtual"><scope>WaterSource</scope><name>getSupplyCapacity</name></member>
      <member refid="classWaterSource_1a7678e05e3e73b927c0b47e3041d7415f" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getTotal_outflow</name></member>
      <member refid="classWaterSource_1a6228c9aee407ca2544753dbd2792c5fb" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getTotal_treatment_capacity</name></member>
      <member refid="classWaterSource_1ad7e60efd7395f8d3e674e602226e5ac1" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getUpstream_source_inflow</name></member>
      <member refid="classWaterSource_1afd2a153ba8f4ecaa9f8fa851d5a1727c" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getUpstreamCatchmentInflow</name></member>
      <member refid="classWaterSource_1a41a9f1fb088f29633c9141687958c16e" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getUtilities_with_allocations</name></member>
      <member refid="classWaterSource_1aee22325e6af0e3c804ddbd9a3505be05" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getWastewater_inflow</name></member>
      <member refid="classWaterSource_1a9d85cbca88eefd54fda383237807470d" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>getWaterQualityPoolID</name></member>
      <member refid="classWaterSource_1a83c6dcf19b64533ce4bc3b918ce6cc8e" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>highest_alloc_id</name></member>
      <member refid="classWaterSource_1a6eafe5dfefd317877d1244e8a7c6e742" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>id</name></member>
      <member refid="classWaterSource_1a130fd661ff31c53115cca23e4e2f210a" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>isOnline</name></member>
      <member refid="classWaterSource_1adae67ac96597e4b25332002b88a9a52b" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>min_environmental_outflow</name></member>
      <member refid="classWaterSource_1a846ea74c5b453d014f594d41fee8c765" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>name</name></member>
      <member refid="classWaterSource_1aef4e289b47c2360f2e991ea3ee535781" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>online</name></member>
      <member refid="classWaterSource_1accb044cc78f9a444ca18bf7283b5b596" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>operator&lt;</name></member>
      <member refid="classWaterSource_1af10a33e286cf44b362984ff8d8053c91" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>operator=</name></member>
      <member refid="classWaterSource_1af25e06ec954898f3392cb125d2f2c2ad" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>operator==</name></member>
      <member refid="classWaterSource_1a9db800769891e1f49d74a78298f4dac1" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>operator&gt;</name></member>
      <member refid="classWaterSource_1a036d7980e74224fd5f5c6a390e0d5abb" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>permitting_time</name></member>
      <member refid="classWaterSource_1a3f04ae75d6235117d391dece2d323890" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>policy_added_demand</name></member>
      <member refid="classWaterSource_1aebc6985952d3e69f0d8ae1d0498a1ffe" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>randomConstructionTime</name></member>
      <member refid="classWaterSource_1a4a4d948033c57feb8523bd7d5828c59b" prot="public" virt="virtual"><scope>WaterSource</scope><name>removeWater</name></member>
      <member refid="classWaterSource_1afe2f6b96383abdb14563db279a261a31" prot="public" virt="virtual"><scope>WaterSource</scope><name>resetAllocations</name></member>
      <member refid="classWaterSource_1adfc85c196cfc262d4b463e87c459eb3f" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>resetTreatmentAllocations</name></member>
      <member refid="classWaterSource_1abaf6cb0ecca08c87428ad516f11f8c2e" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>seed</name></member>
      <member refid="classWaterSource_1ac834762e016e796968ad286feeca7be6" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setAllocations</name></member>
      <member refid="classWaterSource_1ae29ed4aa2b9c97c5a41772daf4631f05" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setAvailableAllocatedVolumes</name></member>
      <member refid="classWaterSource_1a86999f23ec7f4fb518adb88e16f156a7" prot="public" virt="virtual"><scope>WaterSource</scope><name>setFull</name></member>
      <member refid="classWaterSource_1a406246432d29f49189d53207ab1d895a" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setMin_environmental_outflow</name></member>
      <member refid="classWaterSource_1aaa55dc6e14ff184380300147b53c56ec" prot="public" virt="virtual"><scope>WaterSource</scope><name>setOnline</name></member>
      <member refid="classWaterSource_1ab53d376a425b8db603382ba27b52b1d4" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setOutflow_previous_week</name></member>
      <member refid="classWaterSource_1a634904c510b16de6d7c057fed6d6e625" prot="public" virt="virtual"><scope>WaterSource</scope><name>setRealization</name></member>
      <member refid="classWaterSource_1a4c8f4c120b9101767b6013a78eb2c5d4" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setSeed</name></member>
      <member refid="classWaterSource_1abc7034b8c78e45d7b1fa4bd13b8a3bdd" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>setTreatmentAllocations</name></member>
      <member refid="classWaterSource_1ad8496aea2d4ff97c8069b61cc984c799" prot="public" virt="virtual"><scope>WaterSource</scope><name>skipConstruction</name></member>
      <member refid="classWaterSource_1afdd12c29fc74ea21dff1f1be9b8c2b7b" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>source_type</name></member>
      <member refid="classWaterSource_1a87535be59994b2602576cdf34dbe04b9" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>supply_allocated_fractions</name></member>
      <member refid="classWaterSource_1a4be6864dc196287bdf8329b3aa6ca662" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>total_allocated_fraction</name></member>
      <member refid="classWaterSource_1a1934917dd35a2508a5102eb5831431b7" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>total_demand</name></member>
      <member refid="classWaterSource_1a5e6992931464ed75576326b9f1bd3c4f" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>total_outflow</name></member>
      <member refid="classWaterSource_1a2fdfd5ff7d103e71108cf2a31babaccb" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>total_treatment_capacity</name></member>
      <member refid="classWaterSource_1a04f94831f4816bb277c5a615eace7779" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>unsetSeed</name></member>
      <member refid="classWaterSource_1aceb2d77612db7ba71a171848a5e03b4f" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>upstream_catchment_inflow</name></member>
      <member refid="classWaterSource_1a67165e29345b61f36c8d8ccf3f648819" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>upstream_min_env_inflow</name></member>
      <member refid="classWaterSource_1a7a69b2e9b6030f1035e6cf44d2918ee5" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>upstream_source_inflow</name></member>
      <member refid="classWaterSource_1ac345583fc2d0f7e1db31ee40244d7ace" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>utilities_with_allocations</name></member>
      <member refid="classWaterSource_1aeb5a2d2d83383a70ca20f3e94635a9c7" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>wastewater_inflow</name></member>
      <member refid="classWaterSource_1a27b9d29d6cbb36d128f740f7ca00f500" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1a7723d343a0b8edff36018ca7acf09f62" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1a48641ff06b69505ab298f4f23e759a22" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1a284e207f074da6f485d41f65ac025cf1" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1ae8cf84e138983737e044bc1217858021" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1af9377254ee532ee30eaed78953336b5f" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1a5d02f9dc15b18572bbfa945aeec4dbb0" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1aaa3aba0a9709cc1432f85f443b033a65" prot="public" virt="non-virtual"><scope>WaterSource</scope><name>WaterSource</name></member>
      <member refid="classWaterSource_1acef73d9b1675fb6db9ec39347514db6d" prot="protected" virt="non-virtual"><scope>WaterSource</scope><name>wq_pool_id</name></member>
      <member refid="classWaterSource_1aa3b9261264152782c3115d2f563f1caf" prot="public" virt="virtual"><scope>WaterSource</scope><name>~WaterSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
