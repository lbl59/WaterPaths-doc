<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="Array_8h" kind="file" language="C++">
    <compoundname>Array.h</compoundname>
    <includes local="no">set</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdlib</includes>
    <includedby refid="QuadProg_09_09_8h" local="yes">/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/QuadProg++.h</includedby>
    <incdepgraph>
      <node id="1671">
        <label>iomanip</label>
      </node>
      <node id="1672">
        <label>cmath</label>
      </node>
      <node id="1669">
        <label>stdexcept</label>
      </node>
      <node id="1673">
        <label>cstdlib</label>
      </node>
      <node id="1670">
        <label>iostream</label>
      </node>
      <node id="1667">
        <label>/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h</label>
        <link refid="Array_8h"/>
        <childnode refid="1668" relation="include">
        </childnode>
        <childnode refid="1669" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1671" relation="include">
        </childnode>
        <childnode refid="1672" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
      </node>
      <node id="1668">
        <label>set</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1677">
        <label>/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/DataCollector/TransfersDataCollector.h</label>
        <link refid="TransfersDataCollector_8h"/>
      </node>
      <node id="1676">
        <label>/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/DroughtMitigationInstruments/Transfers.h</label>
        <link refid="Transfers_8h"/>
        <childnode refid="1677" relation="include">
        </childnode>
      </node>
      <node id="1674">
        <label>/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h</label>
        <link refid="Array_8h"/>
        <childnode refid="1675" relation="include">
        </childnode>
      </node>
      <node id="1675">
        <label>/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/QuadProg++.h</label>
        <link refid="QuadProg_09_09_8h"/>
        <childnode refid="1676" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classVector" prot="public">Vector</innerclass>
    <innerclass refid="classMatrix" prot="public">Matrix</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" prot="public" static="no" strong="no">
        <type></type>
        <name>MType</name>
        <enumvalue id="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6da3ff81339cfc723dd10714c38227f6565" prot="public">
          <name>DIAG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="24" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="24" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator+</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that returns the positive of the vector <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="302" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a850b5ba6d4d87044704a379c43f45c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator+</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that adds each element in vector <computeroutput>rhs</computeroutput> to each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="318" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a60ac90c59b116cdbc51952477b27b453" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator+</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that adds a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>lhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="338" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="338" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a7966e6f6eb314d402eb61557ff43c5dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator+</definition>
        <argsstring>(const T &amp;a, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that adds a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="356" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="356" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator-</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that returns the negative of the vector <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to turn negative. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="407" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1aafca45bb1d5bc4be0e34bf4c4a3838fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator-</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts each element in vector <computeroutput>rhs</computeroutput> from each element in <computeroutput>lhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to subtract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="423" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="423" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1ac25dd8510bf572cad2d2d832068f0a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator-</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts a constant value <computeroutput>a</computeroutput> from each element in <computeroutput>lhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to subtract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="443" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a425190ee3ff58bd6765030b2b2a97fdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator-</definition>
        <argsstring>(const T &amp;a, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts each element in <computeroutput>rhs</computeroutput> from a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to subtract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="461" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="461" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1af94e125db41e41bd7517c3a00959d220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator*</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies each element in vector <computeroutput>lhs</computeroutput> with each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="516" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="516" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a71c9cb02179797f943daa215dd5efb3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator*</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>lhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="536" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="536" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a2afafa9f85c1906807545bae50b65ead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator*</definition>
        <argsstring>(const T &amp;a, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="554" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="554" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1adffa4a57396bebb545b936f72fe331d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator/</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that divides each element in vector <computeroutput>lhs</computeroutput> with each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="609" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="609" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a4752cac4c52a136fd8666a5fa8e23a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator/</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that divides a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>lhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand side vector to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="629" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="629" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1ab6f6407843908effe421c1a2e702e82c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator/</definition>
        <argsstring>(const T &amp;a, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that divides each element in <computeroutput>rhs</computeroutput> from a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="647" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="647" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a537898981d06fd40b46820a1ffbc6139" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator^</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that raises each element in <computeroutput>lhs</computeroutput> to the power of <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vector . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to raise to the power of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;&amp;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="666" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="666" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a46118c39d13ad3c15b79d307a05a3f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator^</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that raises each element in <computeroutput>lhs</computeroutput> to the power of the constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to raise to the power of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="685" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="685" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a6d67f93789a801e51ff3f42fb9ba38ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; operator^</definition>
        <argsstring>(const T &amp;a, const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator^</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that raises a constant value <computeroutput>a</computeroutput> to each element in <computeroutput>rhs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The base constant value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided vector to raise to the power of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="702" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="702" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1abc545aefaf1a114f9a1e9be1cbca56b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Equivalence operator that checks if all elements in two vectors are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True is all values in <computeroutput>v</computeroutput> are equal to the corresponding values in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="758" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="758" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a229a4ae027391da1465b72389b9d7c98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>A non-equivalence operator that checks if any element in two vectors is not equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if any element in <computeroutput>v</computeroutput> is not equal to the corresponding element in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="779" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="779" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1afbb7c8fffb4f583539e5f2a7485a418b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Operator that checks if all elements in the vector <computeroutput>v</computeroutput> are less than the corresponding elements in the vector <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True is all elements in <computeroutput>v</computeroutput> are less than the corresponding elements in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="800" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="800" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a03439924f6d78282309cd471474447b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Operator that checks if all elements in the vector <computeroutput>v</computeroutput> are less than or equal to the corresponding elements in the vector <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all elements in <computeroutput>v</computeroutput> are less than or equal to the corresponding elements in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="821" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="821" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1adaff5a3e5567581b03f0d957d9df32d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Operator that checks if all elements in the vector <computeroutput>v</computeroutput> are greater than the corresponding elements in the vector <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all elements in <computeroutput>v</computeroutput> are greater than the corresponding elements in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="842" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="842" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1aacf6e422ee1de6818902efb51b858666" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;v, const Vector&lt; T &gt; &amp;w)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Operator that checks if all elements in the vector <computeroutput>v</computeroutput> are greater than or equal to the corresponding elements in the vector <computeroutput>w</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all elements in <computeroutput>v</computeroutput> are greater than or equal to the corresponding elements in <computeroutput>w</computeroutput>. False otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the vectors are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="863" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="863" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1afbee8685eba8033e340917640a7909d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output stream operator that prints the vector to the output stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to print. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="883" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="883" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a5c27cb7e40c60f7addda5657b30bef12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Input stream operator that reads the vector from the input stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::istream&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="902" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="902" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a24594c7611d1c84c486d5fc4b6090544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>unsigned int</type>
        <definition>unsigned int partition</definition>
        <argsstring>(Vector&lt; T &gt; &amp;v, unsigned int begin, unsigned int end)</argsstring>
        <name>partition</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This function partitions a segment of a vector around a pivot for use in quicksort. </para>        </briefdescription>
        <detaileddescription>
<para>The partition operation rearranges elements in the vector such that all elements less than the pivot are on its left, and all greater elements are on its right.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. The type of elements stored in the vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be partitioned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the segment to partition. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending index of the segment to partition. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int The index of the pivot after partitioning. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="928" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="928" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1ae259edfd7588e7360be1a3167ccb0703" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void quicksort</definition>
        <argsstring>(Vector&lt; T &gt; &amp;v, unsigned int begin, unsigned int end)</argsstring>
        <name>quicksort</name>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>This function performs a quicksort on a vector. Quicksort is performed using a recursive divide-and-conquer strategy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be sorted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the segment to sort. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending index of the segment to sort. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="961" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="961" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a5d6f8d1df5bda944fc999be057fad3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator+</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Converts the matrix to its positive equivalent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1350" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1350" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a4f6d133c44cfe929cfe42da7e25d0401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator+</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that adds two matrices of the same dimensions together. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1366" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1366" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a4bc2f1c7633e358ae3e6327919d43775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator+</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that adds a constant value <computeroutput>a</computeroutput> to each element in the matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1387" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1387" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a51155f5c3e7888ec4ecca86683e2213e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator+</definition>
        <argsstring>(const T &amp;a, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that adds a constant value <computeroutput>a</computeroutput> to each element in the matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to add. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1406" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1406" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a5ea5fdedc7d96d9903ccc4f0faeeee2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator-</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Converts the matrix to its negative equivalent. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to convert. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1462" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1462" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1aa78222464540567c953e9159b18a0937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator-</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts two matrices of the same dimensions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to subtract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1478" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1478" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a1d54c9ba487355f209c8f3772fe5efa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator-</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts a constant value <computeroutput>a</computeroutput> from each element in the matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to subtract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1499" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1499" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a474d431c343b6135b8792155b2d17ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator-</definition>
        <argsstring>(const T &amp;a, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that subtracts each element in the matrix from a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to subtract from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to subtract. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1518" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1518" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a2a1a9c3359803e4424202c5613aa0175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator*</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies each element of two matrices of the same dimensions together. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1577" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1577" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1adba1e3d2906334837b3db9487f0c6f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator*</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies each element of the matrix by a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1598" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1598" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a1f54dbc0286c03ecf53e0b57da20bc50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator*</definition>
        <argsstring>(const T &amp;a, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that multiplies each element of the matrix by a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to multiply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to multiply. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1617" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1617" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1af63c24d7f69b40f60c11923dee888485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator/</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that divides each element of two matrices of the same dimensions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt;</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1676" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1676" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1accfaca1f359e749e2d5e97e16149f6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator/</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that divides each element of the matrix by a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1697" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1697" bodyend="1705"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1acba172beb67a71527854aa5f53d6b944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator/</definition>
        <argsstring>(const T &amp;a, const Matrix&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator that divides each element of the matrix by a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to divide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right-hand sided matrix to divide. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1716" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1716" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a72f923665b58e6fd11ca0c72a3f33a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; operator^</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;lhs, const T &amp;a)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Operator that raises each element of the matrix to the power of a constant value <computeroutput>a</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left-hand sided matrix to raise to the power of. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The constant value to raise each element to the power of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1773" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1773" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1abdc785c5b6f39b24e96263372a712d27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;a, const Matrix&lt; T &gt; &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Equality operator that compares two matrices for equality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classMatrix" kindref="compound">Matrix</ref> to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classMatrix" kindref="compound">Matrix</ref> to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all elements in the matrices are equal, false otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1851" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1851" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1adbc697ee3661da2384333560cf75b5c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;a, const Matrix&lt; T &gt; &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Inequality operator that compares two matrices for inequality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classMatrix" kindref="compound">Matrix</ref> to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classMatrix" kindref="compound">Matrix</ref> to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if any element in the matrices is not equal, false otherwise.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrices are of different sizes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1873" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1873" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a2317d4101ee5164b72e47e21ca850856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Matrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Output stream operator that writes the matrix to the output stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; The output stream with the matrix written to it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1893" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1893" bodyend="1904"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1aa2248e50c4fb5557a106c131be7d78fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Matrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Input stream operator that reads the matrix from the input stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream to read from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to read into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::istream&amp; The input stream with the matrix read from it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1915" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1915" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt;</type>
        <definition>Matrix&lt;T&gt; t</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;a)</argsstring>
        <name>t</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Computes the transpose of the matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to transpose. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix&lt;T&gt; The transposed matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1936" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1936" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1aa084bb6daf54f2e07404b4d57ae93a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cholesky_solve</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;LL, Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;b)</argsstring>
        <name>cholesky_solve</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>LL</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solves a linear system using the Cholesky decomposition of a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>This function solves the system ( LL^T x = b ), where ( L ) is a lower triangular matrix obtained via Cholesky decomposition.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>LL</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower triangular matrix from the Cholesky decomposition. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the solution of the linear system. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector representing the right-hand side of the equation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1957" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1957" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a65353077663b26a0ff659cffa003c9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void forward_elimination</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;L, Vector&lt; T &gt; &amp;y, const Vector&lt; T &gt; b)</argsstring>
        <name>forward_elimination</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Performs forward elimination to solve a lower triangular system ( Ly = b ). </para>        </briefdescription>
        <detaileddescription>
<para>This function solves the linear system where ( L ) is a lower triangular matrix.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>The square (lower triangular) matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the intermediate solution ( y ). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector representing the right-hand side of the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix ( L ) is not square or if the dimensions of ( b ) do not match the rows of ( L ). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="1976" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="1976" bodyend="1996"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1a633527c0da498b956b74e4513c000fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void backward_elimination</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;U, Vector&lt; T &gt; &amp;x, const Vector&lt; T &gt; &amp;y)</argsstring>
        <name>backward_elimination</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Performs backward elimination to solve an upper triangular system ( Ux = y ). </para>        </briefdescription>
        <detaileddescription>
<para>This function solves the linear system where ( U ) is an upper triangular matrix.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The square (upper triangular) matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to store the solution ( x ). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector representing the right-hand side of the equation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix ( U ) is not square or if the dimensions of ( y ) do not match the rows of ( U ). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="2012" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="2012" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="Array_8h_1ae6764fc5f9711f913507f36ea0fb7a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt;T&gt; cholesky_solve</definition>
        <argsstring>(const Matrix&lt; T &gt; &amp;LL, const Vector&lt; T &gt; &amp;b)</argsstring>
        <name>cholesky_solve</name>
        <param>
          <type>const <ref refid="classMatrix" kindref="compound">Matrix</ref>&lt; T &gt; &amp;</type>
          <declname>LL</declname>
        </param>
        <param>
          <type>const <ref refid="classVector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solves a linear system using the Cholesky decomposition of a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>This function solves the system ( LL^T x = b ), where ( L ) is a lower triangular matrix obtained from Cholesky decomposition.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements stored in the matrix and vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>LL</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower triangular matrix from the Cholesky decomposition. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector representing the right-hand side of the equation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector&lt;T&gt; The solution vector ( x ).</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix ( LL ) is not square or if the dimensions of ( b ) do not match the rows of ( LL ).</para></parameterdescription>
</parameteritem>
</parameterlist>
Steps:<orderedlist>
<listitem><para>Validate that ( LL ) is a square matrix and that the size of ( b ) matches the number of rows in ( LL ).</para></listitem><listitem><para>Solve ( L y = b ) using forward elimination to compute the intermediate vector ( y ).</para></listitem><listitem><para>Solve ( L^T x = y ) using backward elimination to compute the final solution ( x ).</para></listitem><listitem><para>Return the solution vector ( x ). </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" line="2053" column="1" bodyfile="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h" bodystart="2053" bodyend="2070"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="14"><highlight class="preprocessor">#if<sp/>!defined(_ARRAY_HH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_ARRAY_HH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" kindref="member">MType</ref><sp/>{<sp/><ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6da3ff81339cfc723dd10714c38227f6565" kindref="member">DIAG</ref><sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27" refid="classVector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVector" kindref="compound">Vector</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector</ref><sp/>&amp;rhs);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector_1afd524fac19e6d3d69db5198ffe2952b0" kindref="member">~Vector</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classVector_1aa07a0c8ca467e2ce190afc26054cf422" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i);<sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classVector_1aa07a0c8ca467e2ce190afc26054cf422" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1aa44e8e04a723f2c0bd9382a3bfa46e7c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);<sp/></highlight><highlight class="comment">//assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1aa44e8e04a723f2c0bd9382a3bfa46e7c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a0cdad8a65e9dd1ef60afaf32aa547f9e" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1ab5ed11e19503bbc0ee10c7a8d1ee2978" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a3b3e94a4ee6601a8c3ceaed790c2d965" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1adbf519ce5d68eb131947137e30596dc1" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1acd4d558272832a19d614468400ca605d" kindref="member">operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a0cdad8a65e9dd1ef60afaf32aa547f9e" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1ab5ed11e19503bbc0ee10c7a8d1ee2978" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a3b3e94a4ee6601a8c3ceaed790c2d965" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1adbf519ce5d68eb131947137e30596dc1" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1acd4d558272832a19d614468400ca605d" kindref="member">operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>v;<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Templates<sp/>enable<sp/>us<sp/>to<sp/>write<sp/>generic<sp/>code<sp/>that<sp/>works<sp/>with<sp/>any<sp/>datatype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Data<sp/>type<sp/>can<sp/>be<sp/>passed<sp/>as<sp/>a<sp/>parameter<sp/>in<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="75" refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" refkind="member"><highlight class="normal"><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>n(0),<sp/>v(0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86" refid="classVector_1a8575836acd6e8c9a2297b5ba6d14008c" refkind="member"><highlight class="normal"><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T[n])</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102" refid="classVector_1aa2bc8aac00503574bac8302652ef7ba0" refkind="member"><highlight class="normal"><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T[n])</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="120" refid="classVector_1a62f06e9931e61437a5a5783eca0a9550" refkind="member"><highlight class="normal"><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T[n])</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>*a++;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135" refid="classVector_1ac71d98c4ac152523a76bbadcd3a83a5a" refkind="member"><highlight class="normal"><ref refid="classVector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T[rhs.n])</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>rhs.n;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="149" refid="classVector_1afd524fac19e6d3d69db5198ffe2952b0" refkind="member"><highlight class="normal"><ref refid="classVector_1afd524fac19e6d3d69db5198ffe2952b0" kindref="member">Vector&lt;T&gt;::~Vector</ref>()</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>v;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="161" refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">Vector&lt;T&gt;::resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>this-&gt;n)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(v);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[n];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="180" refid="classVector_1a1ff5ed0bca47854450eb78024c6f52ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">Vector&lt;T&gt;::resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>resize(n);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="198" refid="classVector_1aa44e8e04a723f2c0bd9382a3bfa46e7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1aa44e8e04a723f2c0bd9382a3bfa46e7c" kindref="member">Vector&lt;T&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize(rhs.n);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="217" refid="classVector_1a6bbf5f187006ef2567fdcebd37ebfa97" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;<sp/><ref refid="classVector_1aa44e8e04a723f2c0bd9382a3bfa46e7c" kindref="member">Vector&lt;T&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="231" refid="classVector_1aa07a0c8ca467e2ce190afc26054cf422" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>&amp;<sp/><ref refid="classVector_1aa07a0c8ca467e2ce190afc26054cf422" kindref="member">Vector&lt;T&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="243" refid="classVector_1a36cc881f0270de628bec7a80bbdab741" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classVector_1aa07a0c8ca467e2ce190afc26054cf422" kindref="member">Vector&lt;T&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="244"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="255" refid="classVector_1a5214a382564aedc712b609416aa3b7b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">Vector&lt;T&gt;::size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="256"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="269" refid="classVector_1a0cdad8a65e9dd1ef60afaf32aa547f9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a0cdad8a65e9dd1ef60afaf32aa547f9e" kindref="member">Vector&lt;T&gt;::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+=:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="287" refid="classVector_1a5650df0775f0677f76259cd3f474dded" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a0cdad8a65e9dd1ef60afaf32aa547f9e" kindref="member">Vector&lt;T&gt;::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="302" refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="318" refid="Array_8h_1a850b5ba6d4d87044704a379c43f45c2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>+<sp/>rhs[i];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="338" refid="Array_8h_1a60ac90c59b116cdbc51952477b27b453" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="356" refid="Array_8h_1a7966e6f6eb314d402eb61557ff43c5dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>a<sp/>+<sp/>rhs[i];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="374" refid="classVector_1ab5ed11e19503bbc0ee10c7a8d1ee2978" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1ab5ed11e19503bbc0ee10c7a8d1ee2978" kindref="member">Vector&lt;T&gt;::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator-=:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>-=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="392" refid="classVector_1a7581aba7a67b45ff1b2848d37e00cfa1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1ab5ed11e19503bbc0ee10c7a8d1ee2978" kindref="member">Vector&lt;T&gt;::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>-=<sp/>a;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="407" refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T)(-1)<sp/>*<sp/>rhs;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="423" refid="Array_8h_1aafca45bb1d5bc4be0e34bf4c4a3838fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator-:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>-<sp/>rhs[i];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="443" refid="Array_8h_1ac25dd8510bf572cad2d2d832068f0a43" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="461" refid="Array_8h_1a425190ee3ff58bd6765030b2b2a97fdd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>a<sp/>-<sp/>rhs[i];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="479" refid="classVector_1a3b3e94a4ee6601a8c3ceaed790c2d965" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a3b3e94a4ee6601a8c3ceaed790c2d965" kindref="member">Vector&lt;T&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator*=:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>*=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="497" refid="classVector_1a02e9c5296c7ddb1a2047a8c80d93e0d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1a3b3e94a4ee6601a8c3ceaed790c2d965" kindref="member">Vector&lt;T&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="516" refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator*:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>*<sp/>rhs[i];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="536" refid="Array_8h_1a71c9cb02179797f943daa215dd5efb3b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="554" refid="Array_8h_1a2afafa9f85c1906807545bae50b65ead" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>a<sp/>*<sp/>rhs[i];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="572" refid="classVector_1adbf519ce5d68eb131947137e30596dc1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1adbf519ce5d68eb131947137e30596dc1" kindref="member">Vector&lt;T&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator/=:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>/=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="590" refid="classVector_1a358eca4649d02b3bbab359484eb93140" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1adbf519ce5d68eb131947137e30596dc1" kindref="member">Vector&lt;T&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>/=<sp/>a;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="609" refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator/:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>/<sp/>rhs[i];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="629" refid="Array_8h_1a4752cac4c52a136fd8666a5fa8e23a46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>lhs[i]<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="647" refid="Array_8h_1ab6f6407843908effe421c1a2e702e82c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>a<sp/>/<sp/>rhs[i];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="666" refid="Array_8h_1a537898981d06fd40b46820a1ffbc6139" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a537898981d06fd40b46820a1ffbc6139" kindref="member">operator^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator^:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>pow(lhs[i],<sp/>rhs[i]);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="685" refid="Array_8h_1a46118c39d13ad3c15b79d307a05a3f71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a537898981d06fd40b46820a1ffbc6139" kindref="member">operator^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>pow(lhs[i],<sp/>a);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="702" refid="Array_8h_1a6d67f93789a801e51ff3f42fb9ba38ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a537898981d06fd40b46820a1ffbc6139" kindref="member">operator^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>pow(a,<sp/>rhs[i]);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="721" refid="classVector_1acd4d558272832a19d614468400ca605d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1acd4d558272832a19d614468400ca605d" kindref="member">Vector&lt;T&gt;::operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>rhs.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator^=:<sp/>vectors<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>pow(v[i],<sp/>rhs[i]);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="739" refid="classVector_1a6767000b5cbf4999aa301eb24a7b74fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classVector_1acd4d558272832a19d614468400ca605d" kindref="member">Vector&lt;T&gt;::operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>pow(v[i],<sp/>a);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="758" refid="Array_8h_1abc545aefaf1a114f9a1e9be1cbca56b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1abc545aefaf1a114f9a1e9be1cbca56b1" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>w.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>!=<sp/>w[i])</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="779" refid="Array_8h_1a229a4ae027391da1465b72389b9d7c98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a229a4ae027391da1465b72389b9d7c98" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>w.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>!=<sp/>w[i])</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="800" refid="Array_8h_1afbb7c8fffb4f583539e5f2a7485a418b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(const<sp/>Vector&lt;T&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.size()<sp/>!=<sp/>w.size())</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&gt;=<sp/>w[i])</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="821" refid="Array_8h_1a03439924f6d78282309cd471474447b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(const<sp/>Vector&lt;T&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.size()<sp/>!=<sp/>w.size())</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&gt;<sp/>w[i])</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="842" refid="Array_8h_1adaff5a3e5567581b03f0d957d9df32d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1adaff5a3e5567581b03f0d957d9df32d0" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>w.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&lt;=<sp/>w[i])</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="863" refid="Array_8h_1aacf6e422ee1de6818902efb51b858666" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1aacf6e422ee1de6818902efb51b858666" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>w)</highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>w.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&lt;<sp/>w[i])</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="883" refid="Array_8h_1afbee8685eba8033e340917640a7909d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/>const<sp/>Vector&lt;T&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>v.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size()<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setw(20)<sp/>&lt;&lt;<sp/>std::setprecision(16)<sp/>&lt;&lt;<sp/>v[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setw(20)<sp/>&lt;&lt;<sp/>std::setprecision(16)<sp/>&lt;&lt;<sp/>v[v.size()<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="902" refid="Array_8h_1a5c27cb7e40c60f7addda5657b30bef12" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="Array_8h_1a5c27cb7e40c60f7addda5657b30bef12" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>is,<sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elements;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comma;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>elements;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>v.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>elements);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elements;<sp/>i++)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>v[i]<sp/>&gt;&gt;<sp/>comma;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="928" refid="Array_8h_1a24594c7611d1c84c486d5fc4b6090544" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a24594c7611d1c84c486d5fc4b6090544" kindref="member">partition</ref>(<ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)</highlight></codeline>
<codeline lineno="929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>begin<sp/>+<sp/>1,<sp/>j<sp/>=<sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>the<sp/>first<sp/>element<sp/>in<sp/>the<sp/>segment<sp/>as<sp/>the<sp/>pivot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>pivot<sp/>=<sp/>v[begin];</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;=<sp/>end)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>each<sp/>element<sp/>to<sp/>the<sp/>pivot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[j]<sp/>&lt;<sp/>pivot)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>elements<sp/>as<sp/>necessary<sp/>to<sp/>ensure<sp/>elements<sp/>less<sp/>than<sp/>the<sp/>pivot<sp/>are<sp/>placed<sp/>to<sp/>its<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(v[i],<sp/>v[j]);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Place<sp/>the<sp/>pivot<sp/>in<sp/>its<sp/>correct<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>its<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>v[begin]<sp/>=<sp/>v[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>v[i<sp/>-<sp/>1]<sp/>=<sp/>pivot;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="961" refid="Array_8h_1ae259edfd7588e7360be1a3167ccb0703" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1ae259edfd7588e7360be1a3167ccb0703" kindref="member">quicksort</ref>(<ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>begin,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)</highlight></codeline>
<codeline lineno="962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>begin)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/><ref refid="Array_8h_1a24594c7611d1c84c486d5fc4b6090544" kindref="member">partition</ref>(v,<sp/>begin,<sp/>end);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Array_8h_1ae259edfd7588e7360be1a3167ccb0703" kindref="member">quicksort</ref>(v,<sp/>begin,<sp/>index);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="Array_8h_1ae259edfd7588e7360be1a3167ccb0703" kindref="member">quicksort</ref>(v,<sp/>index<sp/>+<sp/>2,<sp/>end);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="972" refid="classMatrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix</ref></highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>();<sp/></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);<sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>n<sp/>allocations_aux<sp/>m<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>content<sp/>to<sp/>constant<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(<ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" kindref="member">MType</ref><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(<ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" kindref="member">MType</ref><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>to<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix_1a91aa704de674203e96aece9e1955ccd3" kindref="member">~Matrix</ref>();<sp/></highlight><highlight class="comment">//<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="classMatrix_1a771eff354da6c0008228dc19cde4142a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classMatrix_1a771eff354da6c0008228dc19cde4142a" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Subscripting:<sp/>row<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="classMatrix_1af58cf6372d17f7abf5396d32f3ef5cd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classMatrix_1af58cf6372d17f7abf5396d32f3ef5cd7" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>};<sp/></highlight><highlight class="comment">//<sp/>const<sp/>subsctipting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="classMatrix_1a7dded77c0f4c424c98858b5f94c13c16" kindref="member">extractRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="classMatrix_1a4361c4478b01f7df1173e5b64eccd127" kindref="member">extractColumn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="classMatrix_1ad025820349fa69f73f2da395af627741" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a01990eb2552555d37c83272125be68e6" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);<sp/></highlight><highlight class="comment">//<sp/>Assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a01990eb2552555d37c83272125be68e6" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);<sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>to<sp/>every<sp/>element<sp/>value<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a36fdb87d0aa1b906eda9fa1cf81a1477" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a50e2998bc90012d77efc0ff39d089336" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1af6a95588910fa9c53feaae71fe88df81" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1aab1b305350c7547ee31f0eeb92fc8c4a" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1acf14abe2000a4a41dae10db14b5d039c" kindref="member">operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a36fdb87d0aa1b906eda9fa1cf81a1477" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a50e2998bc90012d77efc0ff39d089336" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1af6a95588910fa9c53feaae71fe88df81" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1aab1b305350c7547ee31f0eeb92fc8c4a" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1acf14abe2000a4a41dae10db14b5d039c" kindref="member">operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>**v;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1031" refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>()</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>n(0),<sp/>m(0),<sp/>v(0)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1043" refid="classMatrix_1ac8061527f81abb94e19b1ac6fd4af63a" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[n])</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1063" refid="classMatrix_1a697e01f8d46c2059d0420d5b420efb91" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[n])</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1087" refid="classMatrix_1a33a507863c86bbc82e650054f1cc13b6" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[n])</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>*a++;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1116" refid="classMatrix_1a991881e660607b10ff4fbf705006108d" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(<ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" kindref="member">MType</ref><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>o,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[n])</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>matrix<sp/>data<sp/>and<sp/>set<sp/>up<sp/>row<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>specified<sp/>matrix<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>diagonal<sp/>elements<sp/>to<sp/>`a`<sp/>and<sp/>off-diagonal<sp/>elements<sp/>to<sp/>`o`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6da3ff81339cfc723dd10714c38227f6565" kindref="member">DIAG</ref>:</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>type<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1159" refid="classMatrix_1ab2f0cdfc1e7aac9ddd46a1c6b6a3f2f9" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(<ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6d" kindref="member">MType</ref><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>o,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[n])</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1afb4b79601b9f07458ff37d2c507b3e6da3ff81339cfc723dd10714c38227f6565" kindref="member">DIAG</ref>:</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>a[i];</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>type<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1191" refid="classMatrix_1a6a46705243036bfeee78fe2c84c54340" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a9d567e3a121b1be0c3f9c461cab524fe" kindref="member">Matrix&lt;T&gt;::Matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v(new<sp/>T*[rhs.n])</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>rhs.n;<sp/>m<sp/>=<sp/>rhs.m;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1208" refid="classMatrix_1a91aa704de674203e96aece9e1955ccd3" refkind="member"><highlight class="normal"><ref refid="classMatrix_1a91aa704de674203e96aece9e1955ccd3" kindref="member">Matrix&lt;T&gt;::~Matrix</ref>()</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(v[0]);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(v);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1227" refid="classMatrix_1a01990eb2552555d37c83272125be68e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a01990eb2552555d37c83272125be68e6" kindref="member">Matrix&lt;T&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize(rhs.n,<sp/>rhs.m);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1248" refid="classMatrix_1a603960a94121d9b35509199de88d1a92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a01990eb2552555d37c83272125be68e6" kindref="member">Matrix&lt;T&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1265" refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">Matrix&lt;T&gt;::resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>this-&gt;n<sp/>&amp;&amp;<sp/>m<sp/>==<sp/>this-&gt;m)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(v[0]);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(v);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;n<sp/>=<sp/>n;<sp/>this-&gt;m<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T*[n];</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[m<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>v[i<sp/>-<sp/>1]<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1291" refid="classMatrix_1ae866a1b312aa040b587b40c5f54b6a54" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">Matrix&lt;T&gt;::resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>resize(n,<sp/>m);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1310" refid="classMatrix_1a7dded77c0f4c424c98858b5f94c13c16" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="classMatrix_1a7dded77c0f4c424c98858b5f94c13c16" kindref="member">Matrix&lt;T&gt;::extractRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1311"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>n)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>extractRow:<sp/>trying<sp/>to<sp/>extract<sp/>a<sp/>row<sp/>out<sp/>of<sp/>matrix<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(v[i],<sp/>m);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1329" refid="classMatrix_1a4361c4478b01f7df1173e5b64eccd127" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="classMatrix_1a4361c4478b01f7df1173e5b64eccd127" kindref="member">Matrix&lt;T&gt;::extractColumn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1330"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/>m)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>extractRow:<sp/>trying<sp/>to<sp/>extract<sp/>a<sp/>row<sp/>out<sp/>of<sp/>matrix<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>tmp(n);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>v[i][j];</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1350" refid="Array_8h_1a5d6f8d1df5bda944fc999be057fad3fa" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1366" refid="Array_8h_1a4f6d133c44cfe929cfe42da7e25d0401" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>+<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1387" refid="Array_8h_1a4bc2f1c7633e358ae3e6327919d43775" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1406" refid="Array_8h_1a51155f5c3e7888ec4ecca86683e2213e" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a262f62b4b8429f3f777233b7876f44b7" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>a<sp/>+<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1426" refid="classMatrix_1a36fdb87d0aa1b906eda9fa1cf81a1477" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a36fdb87d0aa1b906eda9fa1cf81a1477" kindref="member">Matrix&lt;T&gt;::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>n<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+=:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>+=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1445" refid="classMatrix_1a5aeaf1a90547b2288646d57143d5518c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a36fdb87d0aa1b906eda9fa1cf81a1477" kindref="member">Matrix&lt;T&gt;::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1462" refid="Array_8h_1a5ea5fdedc7d96d9903ccc4f0faeeee2c" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(T)(-1)<sp/>*<sp/>rhs;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1478" refid="Array_8h_1aa78222464540567c953e9159b18a0937" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator-:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>-<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1499" refid="Array_8h_1a1d54c9ba487355f209c8f3772fe5efa3" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1518" refid="Array_8h_1a474d431c343b6135b8792155b2d17ccf" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a143e90bb2264e74f81eecb80ade1a645" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>a<sp/>-<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1538" refid="classMatrix_1a50e2998bc90012d77efc0ff39d089336" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a50e2998bc90012d77efc0ff39d089336" kindref="member">Matrix&lt;T&gt;::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>n<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator-=:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>-=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1557" refid="classMatrix_1a8776d41fcbbc1fc08425492576cf6786" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1a50e2998bc90012d77efc0ff39d089336" kindref="member">Matrix&lt;T&gt;::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>-=<sp/>a;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1577" refid="Array_8h_1a2a1a9c3359803e4424202c5613aa0175" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator*:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>*<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1598" refid="Array_8h_1adba1e3d2906334837b3db9487f0c6f81" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1617" refid="Array_8h_1a1f54dbc0286c03ecf53e0b57da20bc50" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1af94e125db41e41bd7517c3a00959d220" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>a<sp/>*<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1637" refid="classMatrix_1af6a95588910fa9c53feaae71fe88df81" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1af6a95588910fa9c53feaae71fe88df81" kindref="member">Matrix&lt;T&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>n<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator*=:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>*=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1656" refid="classMatrix_1a9ac358ade86c1b442aa75852b2dd663a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1af6a95588910fa9c53feaae71fe88df81" kindref="member">Matrix&lt;T&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1676" refid="Array_8h_1af63c24d7f69b40f60c11923dee888485" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>/<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1697" refid="Array_8h_1accfaca1f359e749e2d5e97e16149f6b4" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>lhs[i][j]<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1716" refid="Array_8h_1acba172beb67a71527854aa5f53d6b944" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1adffa4a57396bebb545b936f72fe331d8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>a<sp/>/<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1736" refid="classMatrix_1aab1b305350c7547ee31f0eeb92fc8c4a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1aab1b305350c7547ee31f0eeb92fc8c4a" kindref="member">Matrix&lt;T&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>n<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator+=:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>/=<sp/>rhs[i][j];</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1755" refid="classMatrix_1ada3039797826038262e03da2ee3a8697" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1aab1b305350c7547ee31f0eeb92fc8c4a" kindref="member">Matrix&lt;T&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>/=<sp/>a;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1773" refid="Array_8h_1a72f923665b58e6fd11ca0c72a3f33a7a" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a537898981d06fd40b46820a1ffbc6139" kindref="member">operator^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>(),<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>());</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i][j]<sp/>=<sp/>pow(lhs[i][j],<sp/>a);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1791" refid="classMatrix_1acf14abe2000a4a41dae10db14b5d039c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1acf14abe2000a4a41dae10db14b5d039c" kindref="member">Matrix&lt;T&gt;::operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>rhs.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>||<sp/>n<sp/>!=<sp/>rhs.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Operator^=:<sp/>matrices<sp/>have<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>pow(v[i][j],<sp/>rhs[i][j]);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1810" refid="classMatrix_1af35faeb39342bf42c4470cf10630e32f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classMatrix_1acf14abe2000a4a41dae10db14b5d039c" kindref="member">Matrix&lt;T&gt;::operator^=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m;<sp/>j++)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i][j]<sp/>=<sp/>pow(v[i][j],<sp/>a);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1830" refid="classMatrix_1a8d390e8b2581c65774f58a0a3b716dcb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;::operator</ref><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>()</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>m<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>matrix<sp/>cast<sp/>to<sp/>vector:<sp/>trying<sp/>to<sp/>cast<sp/>a<sp/>multi-dimensional<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extractRow(0);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extractColumn(0);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1851" refid="Array_8h_1abdc785c5b6f39b24e96263372a712d27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1abc545aefaf1a114f9a1e9be1cbca56b1" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>b.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>||<sp/>a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>b.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>())</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Matrices<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i][j]<sp/>!=<sp/>b[i][j])</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1873" refid="Array_8h_1adbc697ee3661da2384333560cf75b5c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a229a4ae027391da1465b72389b9d7c98" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>!=<sp/>b.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>()<sp/>||<sp/>a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>b.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>())</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Matrices<sp/>of<sp/>different<sp/>size<sp/>are<sp/>not<sp/>confrontable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i][j]<sp/>!=<sp/>b[i][j])</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1893" refid="Array_8h_1a2317d4101ee5164b72e47e21ca850856" refkind="member"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/>const<sp/>Matrix&lt;T&gt;&amp;<sp/>m)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>m.nrows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.ncols()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m.nrows();<sp/>i++)</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m.ncols()<sp/>-<sp/>1;<sp/>j++)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setw(20)<sp/>&lt;&lt;<sp/>std::setprecision(16)<sp/>&lt;&lt;<sp/>m[i][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setw(20)<sp/>&lt;&lt;<sp/>std::setprecision(16)<sp/>&lt;&lt;<sp/>m[i][m.ncols()<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1915" refid="Array_8h_1aa2248e50c4fb5557a106c131be7d78fb" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="Array_8h_1a5c27cb7e40c60f7addda5657b30bef12" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>is,<sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>m)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows,<sp/>cols;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comma;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>rows<sp/>&gt;&gt;<sp/>cols;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>m.<ref refid="classMatrix_1a8d10454cfe9427269b54a754262004b8" kindref="member">resize</ref>(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cols;<sp/>j++)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>m[i][j]<sp/>&gt;&gt;<sp/>comma;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1936" refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" refkind="member"><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/><ref refid="Array_8h_1a182b5b431d17bd072b8384e4ad728cf3" kindref="member">t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="1937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>tmp(a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>(),<sp/>a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>());</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>a.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();<sp/>j++)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[j][i]<sp/>=<sp/>a[i][j];</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1957" refid="Array_8h_1aa084bb6daf54f2e07404b4d57ae93a84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1aa084bb6daf54f2e07404b4d57ae93a84" kindref="member">cholesky_solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>LL,<sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="Array_8h_1aa084bb6daf54f2e07404b4d57ae93a84" kindref="member">cholesky_solve</ref>(LL,<sp/>b);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1976" refid="Array_8h_1a65353077663b26a0ff659cffa003c9a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a65353077663b26a0ff659cffa003c9a3" kindref="member">forward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>L,<sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>b)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>L<sp/>is<sp/>a<sp/>square<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>L.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Forward<sp/>elimination:<sp/>matrix<sp/>must<sp/>be<sp/>squared<sp/>(lower<sp/>triangular)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>b<sp/>matches<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>L.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>L.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Forward<sp/>elimination:<sp/>b<sp/>vector<sp/>must<sp/>be<sp/>of<sp/>the<sp/>same<sp/>dimensions<sp/>of<sp/>L<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>b.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>y.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>y[0]<sp/>=<sp/>b[0]<sp/>/<sp/>L[0][0];</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>Ly<sp/>=<sp/>b<sp/>iteratively:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>-=<sp/>L[i][j]<sp/>*<sp/>y[j];</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>y[i]<sp/>/<sp/>L[i][i];</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2012" refid="Array_8h_1a633527c0da498b956b74e4513c000fc9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="Array_8h_1a633527c0da498b956b74e4513c000fc9" kindref="member">backward_elimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>U,<sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>y)</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>U<sp/>is<sp/>a<sp/>square<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>U.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Backward<sp/>elimination:<sp/>matrix<sp/>must<sp/>be<sp/>squared<sp/>(upper<sp/>triangular)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>y<sp/>matches<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>U.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Backward<sp/>elimination:<sp/>b<sp/>vector<sp/>must<sp/>be<sp/>of<sp/>the<sp/>same<sp/>dimensions<sp/>of<sp/>U<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>n<sp/>=<sp/>y.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>x.<ref refid="classVector_1ae751d4bf4c403e4578a9df1202e93f56" kindref="member">resize</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>x[n<sp/>-<sp/>1]<sp/>=<sp/>y[n<sp/>-<sp/>1]<sp/>/<sp/>U[n<sp/>-<sp/>1][n<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>Ux<sp/>=<sp/>y<sp/>iteratively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>n<sp/>-<sp/>2;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>-=<sp/>U[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>x[i]<sp/>/<sp/>U[i][i];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2053" refid="Array_8h_1ae6764fc5f9711f913507f36ea0fb7a2f" refkind="member"><highlight class="normal"><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="Array_8h_1aa084bb6daf54f2e07404b4d57ae93a84" kindref="member">cholesky_solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classMatrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>LL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>LL<sp/>is<sp/>a<sp/>square<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LL.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>()<sp/>!=<sp/>LL.<ref refid="classMatrix_1ad025820349fa69f73f2da395af627741" kindref="member">nrows</ref>())</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Cholesky<sp/>solve:<sp/>matrix<sp/>must<sp/>be<sp/>squared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>LL.<ref refid="classMatrix_1aa62107f075998f969b39fcb1bef20c44" kindref="member">ncols</ref>();</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>b<sp/>matches<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>LL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.<ref refid="classVector_1a5214a382564aedc712b609416aa3b7b1" kindref="member">size</ref>()<sp/>!=<sp/>n)</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>Cholesky<sp/>decomposition:<sp/>b<sp/>vector<sp/>must<sp/>be<sp/>of<sp/>the<sp/>same<sp/>dimensions<sp/>of<sp/>LU<sp/>matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Solve<sp/>Ly<sp/>=<sp/>b<sp/>using<sp/>forward<sp/>elimination<sp/>to<sp/>compute<sp/>the<sp/>intermediate<sp/>vector<sp/>y.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a65353077663b26a0ff659cffa003c9a3" kindref="member">forward_elimination</ref>(LL,<sp/>y,<sp/>b);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>L^T<sp/>x<sp/>=<sp/>y<sp/>using<sp/>backward<sp/>elimination<sp/>to<sp/>compute<sp/>the<sp/>final<sp/>solution<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="Array_8h_1a633527c0da498b956b74e4513c000fc9" kindref="member">backward_elimination</ref>(LL,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>define<sp/>_ARRAY_HH_</highlight></codeline>
    </programlisting>
    <location file="/home/fs02/pmr82_0001/lbl59/WaterPaths-doc/src/Utils/QPSolver/Array.h"/>
  </compounddef>
</doxygen>
