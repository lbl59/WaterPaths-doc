/**
 * @class Utility
 * @brief The `Utility` class manages the water supply, demand, financial, and ROF aspects of a utility. It also handles all its connected water sources.
 * 
 * Created by Bernardo on 1/13/17.
 */
#ifndef TRIANGLEMODEL_UTILITY_H
#define TRIANGLEMODEL_UTILITY_H
#include <map>
#include <memory>
#include "../WaterSources/Reservoir.h"
#include "../../Utils/Constants.h"
#include "../../Controls/WwtpDischargeRule.h"
#include "InfrastructureManager.h"

class Utility {
  private:
    /**
     * @brief A vector of weekly average volumetric prices of a utility's water supply.
     */
    vector<double> weekly_average_volumetric_price;
    /**
     * @brief A vector containing the IDs of the prioritized water sources that the utility 
     * can draw from.
     */
    vector<int> priority_draw_water_source;
    /**
     * @brief A vector containing the IDs of the non-prioritized water sources that the utility 
     * can draw from.
     */
    vector<int> non_priority_draw_water_source;
    /**
     * @brief A vector of demand weekly peaking factors
     * @see splitDemands, setRealization
     */
    vector<double> weekly_peaking_factor;
    /**
     * @brief The actual risk of failure for the utility's storage and treatment components.
     * @see getRisk_of_failure, setRisk_of_failure
     */
    double short_term_risk_of_failure = 0;
    /**
     * @brief The risk of failure for the utility's storage components.
     * @see getStorageRisk_of_failure, setRisk_of_failures
     */
    double short_term_storage_risk_of_failure = 0;
    /**
     * @brief The risk of failure for the utility's treatment components.
     * @see getTreatmentRisk_of_failure, setRisk_of_failures
     */
    double short_term_treatment_risk_of_failure = 0;
    /**
     * @brief The max long-term risk of failure between the utility's storage and treatment components.
     * @see getLong_term_risk_of_failure, infrastructureConstructionHandler
     */
    double long_term_actual_risk_of_failure = 0;
    /**
     * @brief The long-term risk of failure for the utility's treatment components.
     * @see setLongTermRisk_of_failures, getLong_term_treatment_risk_of_failure
     */
    double long_term_treatment_risk_of_failure = 0;
    /**
     * @brief The long-term risk of failure for the utility's storage components.
     * @see setLongTermRisk_of_failures, getLong_term_storage_risk_of_failure
     */
    double long_term_storage_risk_of_failure = 0;
    /**
     * @brief The total storage capacity of the utility.
     * @see constructors, resetTotal_storage_capacity, addWaterSource, setWaterSourceOnline,
     *    infrastructureConstructionHandler, getStorageToCapacityRatio, getAvailableVolumeToCapacityRatio,
     *    getTotal_storage_capacity
     */
    double total_storage_capacity = 0;
    /**
     * @brief The total available volume for the utility.
     * @see constructors, getAvailableVolumeToCapacityRatio, getTotal_available_volume, updateTotalAvailableVolume, 
     *    addWaterSource, splitDemands, setWaterSourceOnline, infrastructureConstructionHandler
     */
    double total_available_volume = 0;
    /**
     * @brief The total stored volume for the utility.
     * @see getTotal_stored_volume, updateTotalAvailableVolume, addWaterSource, setWaterSourceOnline,
     *   infrastructureConstructionHandler
     */
    double total_stored_volume = 0;
    /**
     * @brief The total treatment capacity of the utility.
     * @see infrastructureConstructionHandler, getUnrestrictedDemandToTreatmentCapacityRatio,
     *    getTotal_treatment_capacity, updateTreatmentCapacity, setTreatmentCapacity, addWaterSource,
     *    @seesplitDemands, setWaterSourceOnline
     */
    double total_treatment_capacity = 0;
    /**
     * @brief The total wastewater discharged by the utility after treatment.
     * @see calculateWastewater_releases, getWaste_water_discharge
     */
    double waste_water_discharge = 0;
    /**
     * @brief The total gross revenue generated by the utility.
     * @see updateContingencyFundAndDebtService, getGrossRevenue
     */
    double gross_revenue = 0;
    /**
     * @brief The total unrestricted demand for the utility.
     * @see getUnfulfilled_demand, splitDemands, updateContingencyFundAndDebtService,
     *    updateContingencyFundAndDebtService
     */
    double unfulfilled_demand = 0;
    /**
     * @brief The net stream inflow for the utility accounting allocations across all sources.
     * @see getNet_stream_inflow, updateTotalAvailableVolume
     */
    double net_stream_inflow = 0;
    /**
     * @brief A boolean flag indicating if a utility  uses a speific source in a given realization.
     * @see splitDemands, setNoFinaicalCalculations
     */
    bool used_for_realization = true;
    /**
     * @brief A vector of water sources available to the utility.
     */
    vector<WaterSource *> water_sources;
    /**
     * @brief The waste water treatment discharge rule for the utility/
     */
    WwtpDischargeRule wwtp_discharge_rule;
    /**
     * @brief The 2D vector storing the full timeseries of demands for the utility across
     * all realizations.
     */
    vector<vector<double>>& demands_all_realizations;
    /**
     * @brief The vector of average annual demand projections for the utility.
     * @see constructors, calculateDemandEstimateFromProjection, calculateCurrentToNextYearDemandDelta
     */
    vector<double>& annual_demand_projections;
    /**
     * @brief The number of weekly unrestricted demand entries for the utility for one realization.
     * @see constructors, splitDemands, infrastructureConstructionHandler, setRealization,
     *    getUnrestrictedDemand
     */
    vector<double> demand_series_realization;
    /**
     * @brief The vector of realization factors for the utility.
     * FIXME: Unused in the code
     */
    double *rdm_factors_realization;
    /**
     * @brief The infrastructure construction manager for the utility.
     * @see constructors, getDemand_infra_construction_order, getRof_infrastructure_construction_order,
     *    getInfrastructure_built, getInfrastructure_construction_manager
     */
    InfrastructureManager infrastructure_construction_manager;

    /// Drought mitigation
    /**
     * @brief The contribution to the contingency fund.
     */
    double fund_contribution = 0;
    /**
     * @brief The maximum allowed value of the contingency fund.
     */
    double contingency_fund_cap = 1;
    /**
     * @brief The DU factor multiplier that increases or increases demand.
     */
    double demand_multiplier = 1;
    /**
     * @brief The demand offset for the utility.
     * @see getDemand_offset, splitDemands, updateContingencyFundAndDebtService,
     *    resetDroughtMitigationVariables, calculateWastewater_releases, setDemand_offset,
     */
    double demand_offset = 0;
    /**
     * @brief The price of water under water use restrictions for the utility.
     * @see updateContingencyFundAndDebtService, resetDroughtMitigationVariables,
     *    setRestricted_price
     */
    double restricted_price = NON_INITIALIZED;
    /**
     * @brief The rate of change of the demand offset per unit volume.
     * @see updateContingencyFundAndDebtService, resetDroughtMitigationVariables,
     *    setDemand_offset
     */
    double offset_rate_per_volume = 0;
    /**
     * @brief The total current value of the utility's contingency fund
     * @see getContingency_fund, updateContingencyFundAndDebtService, addInsurancePayout,
     *    purchaseInsurance
     */
    double contingency_fund = 0;
    /**
     * @brief The total cost of drought mitigation measures. 
     * @see getDrought_mitigation_cost
     */
    double drought_mitigation_cost = 0;
    /**
     * @brief The total insurance payout for the utility.
     * @see getInsurance_payout, updateContingencyFundAndDebtService
     */
    double insurance_payout = 0;
    /**
     * @brief The total insurance purchase cost for the utility.
     * @see purchaseInsurance, updateContingencyFundAndDebtService, getInsurance_purchase
     */
    double insurance_purchase = 0;
    /**
     * @brief The total demand for the utility under restrictions.
     * @see splitDemands, updateContingencyFundAndDebtService, calculateWastewater_releases,
     *    getRestrictedDemand
     */
    double restricted_demand = 0;
    /**
     * @brief The total unrestricted demand for the utility.
     * @see splitDemands, updateContingencyFundAndDebtService,
     *    getUnrestrictedDemandToTreatmentCapacityRatio
     */
    double unrestricted_demand = 0;
    /**
     * @brief The total number of water sources that are online and supplying water to the utility.
     * @see addWaterSource
     */
    int n_sources = 0;
    
    /**
     * @brief The infrastructure discount rate for the utility.
     * 
     */
    double infra_discount_rate;
    /**
     * @brief The bond term multiplier used to adjust the term of infrastructure bonds.
     */
    double bond_term_multiplier;
    /**
     * @brief The bond interest rate multiplier used to adjust the interest rate for infrastructure bonds.
     */
    double bond_interest_rate_multiplier;
    /**
     * @brief The maximum capacity of the utility's water sources.
     * @see addWaterSource
     */
    double max_capacity = 0;

    /// Infrastructure cost
    /**
     * @brief The current (weekly) debt payment of the utility.
     * @see updateContingencyFundAndDebtService, updateCurrent_debt_payment,
     *   getCurrent_debt_payment  
     */
    double current_debt_payment = 0;
    /**
     * @brief The present value of the current debt payment.
     */
    double current_present_valued_debt_payment = 0;
    /**
     * @brief The net present cost of infrastructure for the utility.
     * FIXME: Unused in the code
     */
    vector<vector<double>> debt_payment_streams;
    /**
     * @brief The net present cost of infrastructure for the utility.
     */
    double infra_net_present_cost = 0;
    /**
     * @brief A vector of bonds that have been issued by the utility.
     * 
     */
    vector<Bond *> issued_bonds;

    /// Demand projection for ROF
    /**
     * @brief The future demand estimate for the utility calculated by adjusting current demand with the
     * average demand growth rate and length of projected demand.
     * @see getFuture_demand_estimate, setFuture_demand_estimate, calculateDemandEstimateFromProjection
     */
    double future_demand_estimate = 0;
    /**
     * @brief The current year's recorded demand for the utility.
     * @see calculateDemandEstimateFromProjection, getCurrent_year_demand_record, 
     *    setCurrent_year_demand_record, calculateCurrentToNextYearDemandDelta
     */
    double current_year_recorded_demand = 0;
    /**
     * @brief The average annual weekly demand across all simulation years.
     * @see calculateDemandEstimateFromProjection, setRealization
     */
    vector<double> annual_average_weekly_demand;
    /**
     * @brief The length (in years) of the forecast period for demand projections.
     * @see constructors, calculateDemandEstimateFromProjection
     */
    int demand_projection_forecast_length = LOOK_AHEAD_YEARS_FOR_DEMAND_PROJECTION;
    /**
     * @brief The historical period (in years) used for demand projection.
     * Caps the number of years before reprojection is done.
     * 
     * @see constructors, calculateDemandEstimateFromProjection
     */
    int demand_projection_historical_period_to_use = LOOK_BACK_YEARS_FOR_DEMAND_REPROJECTION;
    /**
     * @brief The frequency (in years) for updating demand projections.
     * 
     * @see constructors, calculateDemandEstimateFromProjection
     */
    int demand_projection_reprojection_frequency = FREQUENCY_OF_DEMAND_REPROJECTION_YEARS;

public:

    /**
     * @brief The unique identifier for the utility
     */
    const int id;
    /**
     * @brief The number of weeks where demand data is available.
     */
    const int number_of_week_demands;
    /**
     * @brief A pointer to the name of the utility.
     */
    const char *name;
    /**
     * @brief The percentage contribution of its gross revenue to the contingency fund.
     */
    const double percent_contingency_fund_contribution;
    /**
     * @brief The demand buffer for smoothing demand projections.
     * 
     */
    const double demand_buffer;

    /**
      * @brief Main constructor (14-parameter) for a Utility object with specified attributes and initializes its parameters.
      *  
      * This constructor sets up the Utility instance with various properties related to water demand, pricing,
      * contingency funds, and infrastructure financing. It also computes the weekly average water prices based on
      * monthly demand fractions and water price types.
      * 
      * @param name The name of the utility.
      * @param id The unique identifier for the utility.
      * @param demands_all_realizations A reference to a vector of weekly demand data for all realizations.
      * @param annual_demand_projections A reference to a vector of annual demand projections.
      * @param number_of_week_demands The number of weekly demand entries.
      * @param percent_contingency_fund_contribution Percentage contribution to the contingency fund.
      * @param contingency_fund_cap The maximum allowed value of the contingency fund.
      * @param typesMonthlyDemandFraction A reference to a vector of vectors containing monthly demand fractions by water type.
      *         Table of size 12 (months in year) by number of consumer tiers with the fraction of the total demand consumed by each tier in each month of the year. 
      *         The last column must be the fraction of the demand treated as sewage. 
      *         The summation of all number in a row but the last one, therefore, must sum to 1.
      * @param typesMonthlyWaterPrice A reference to a vector of vectors containing monthly water prices by tier type.
      *         The last column is the price charged for waste water treatment.
      * @param wwtp_discharge_rule The rule governing wastewater treatment plant discharges.
      *         A 53-week-long time series according to which fractions of sewage is discharged in different water sources 
      *         (normally one for each WWTP).
      * @param demand_buffer A buffer for smoothing demand projections.
      * @param demand_projection_forecast_length Length of the forecast period for demand projections (in weeks).
      * @param demand_projection_historical_period_to_use Historical period (in weeks) used for demand projection.
      * @param demand_projection_reprojection_frequency Frequency (in weeks) for updating demand projections.
      * 
      * @see Utility::calculateWeeklyAverageWaterPrices for details on the computation of weekly average water prices.
      */
    Utility(
        const char *name, int id,
        vector<vector<double>>& demands_all_realizations,
        vector<double>& annual_demand_projections,
        int number_of_week_demands,
        const double percent_contingency_fund_contribution,
        const double contingency_fund_cap,
        const vector<vector<double>> &typesMonthlyDemandFraction,
        const vector<vector<double>> &typesMonthlyWaterPrice,
        WwtpDischargeRule wwtp_discharge_rule,
        double demand_buffer,
        int demand_projection_forecast_length,
        int demand_projection_historical_period_to_use,
        int demand_projection_reprojection_frequency);
    
    /**
      * @brief The constructor (16-parameter) for a Utility object for when there is infrastructure to be built.
      *  
      * This constructor sets up a Utility with specified attributes and initializes its parameters and infrastructure manager.
      * Sets up the Utility instance, initializes water demand, pricing, and financial properties, 
      * and integrates infrastructure construction management functionality. It also computes weekly average water prices 
      * and ensures the provided parameters are valid.
      * 
      * @param name The name of the utility.
      * @param id The unique identifier for the utility.
      * @param demands_all_realizations A vector of weekly demand data for all realizations.
      * @param annual_demand_projections A vector of annual demand projections.
      * @param number_of_week_demands The number of weekly demand entries.
      * @param percent_contingency_fund_contribution Percentage contribution to the contingency fund.
      * @param typesMonthlyDemandFraction A reference to a vector of vectors containing monthly demand fractions by water type.
      *         Table of size 12 (months in year) by number of consumer tiers with the fraction of the total demand consumed by each tier in each month of the year. 
      *         The last column must be the fraction of the demand treated as sewage. 
      *         The summation of all number in a row but the last one, therefore, must sum to 1.      
      * @param typesMonthlyWaterPrice A reference to a vector of vectors containing monthly water prices by tier type.
      *         The last column is the price charged for waste water treatment.
      * @param wwtp_discharge_rule The rule governing wastewater treatment plant discharges.
      *         A 53-week-long time series according to which fractions of sewage is discharged in different water sources 
      *         (normally one for each WWTP).
      * @param demand_buffer A buffer for smoothing demand projections.
      * @param rof_infra_construction_order A vector defining the ROF-based construction order for infrastructure.
      * @param demand_infra_construction_order A vector defining the demand-based construction order for infrastructure.
      * @param infra_construction_triggers A vector of construction triggers for infrastructure projects.
      * @param infra_discount_rate The discount rate applied to infrastructure construction costs.
      * @param bond_term The term of infrastructure bonds.
      * @param bond_interest_rate The interest rate for infrastructure bonds.
      * 
      * @throws std::invalid_argument If both construction order vectors are empty.
      * @throws std::invalid_argument If the infrastructure discount rate is less than or equal to zero.
      * 
      * @see Utility::calculateWeeklyAverageWaterPrices for details on the computation of weekly average water prices.
      * @see InfrastructureManager for details on infrastructure construction management.
      */
    Utility(const char *name, int id, 
        vector<vector<double>>& demands_all_realizations,
        vector<double>& annual_demand_projections,
        int number_of_week_demands, 
        const double percent_contingency_fund_contribution,
        const vector<vector<double>> &typesMonthlyDemandFraction,
        const vector<vector<double>> &typesMonthlyWaterPrice, 
        WwtpDischargeRule wwtp_discharge_rule,
        double demand_buffer, 
        const vector<int> &rof_infra_construction_order,
        const vector<int> &demand_infra_construction_order,
        const vector<double> &infra_construction_triggers, 
        double infra_discount_rate, double bond_term,
        double bond_interest_rate);

    /**
      * @brief The constructor (21-parameter) for a Utility object for when there is infrastructure to be built.
      *  
      * This constructor sets up a Utility with specified attributes and initializes its parameters and infrastructure manager.
      * Sets up the Utility instance, initializes water demand, pricing, and financial properties, 
      * and integrates infrastructure construction management functionality. It also computes weekly average water prices 
      * and ensures the provided parameters are valid.
      * 
      * @param name The name of the utility.
      * @param id The unique identifier for the utility.
      * @param demands_all_realizations A vector of weekly demand data for all realizations.
      * @param annual_demand_projections A vector of annual demand projections.
      * @param number_of_week_demands The number of weekly demand entries.
      * @param percent_contingency_fund_contribution Percentage contribution to the contingency fund.
      * @param contingency_fund_cap The maximum allowed value of the contingency fund.
      * @param typesMonthlyDemandFraction A reference to a vector of vectors containing monthly demand fractions by water type.
      *         Table of size 12 (months in year) by number of consumer tiers with the fraction of the total demand consumed by each tier in each month of the year. 
      *         The last column must be the fraction of the demand treated as sewage. 
      *         The summation of all number in a row but the last one, therefore, must sum to 1.      
      * @param typesMonthlyWaterPrice A reference to a vector of vectors containing monthly water prices by tier type.
      *         The last column is the price charged for waste water treatment.
      * @param wwtp_discharge_rule The rule governing wastewater treatment plant discharges.
      *         A 53-week-long time series according to which fractions of sewage is discharged in different water sources 
      *         (normally one for each WWTP).
      * @param demand_buffer A buffer for smoothing demand projections.
      * @param rof_infra_construction_order A vector defining the ROF-based construction order for infrastructure.
      * @param demand_infra_construction_order A vector defining the demand-based construction order for infrastructure.
      * @param infra_construction_triggers A vector of construction triggers for infrastructure projects.
      * @param infra_discount_rate The discount rate applied to infrastructure construction costs.
      * @param infra_if_built_remove A vector defining dependencies for infrastructure projects.
      *         if infra option in position 0 of a row is built, 
      *         remove infra options of IDs in remaining positions of the same row.
      * @param bond_term The term of infrastructure bonds.
      * @param bond_interest_rate The interest rate for infrastructure bonds.
      * @param demand_projection_forecast_length Length of the forecast period for demand projections (in weeks).
      * @param demand_projection_historical_period_to_use Historical period (in weeks) used for demand projection.
      * @param demand_projection_reprojection_frequency Frequency (in weeks) for updating demand projections.
      * 
      * @throws std::invalid_argument If both construction order vectors are empty.
      * @throws std::invalid_argument If the infrastructure discount rate is less than or equal to zero.
      * 
      * @see Utility::calculateWeeklyAverageWaterPrices for details on the computation of weekly average water prices.
      * @see InfrastructureManager for details on infrastructure construction management.
      */
    Utility(const char *name, int id, vector<vector<double>>& demands_all_realizations, vector<double>& annual_demand_projections,
        int number_of_week_demands, const double percent_contingency_fund_contribution,
        const double contingency_fund_cap,
        const vector<vector<double>> &typesMonthlyDemandFraction,
        const vector<vector<double>> &typesMonthlyWaterPrice, WwtpDischargeRule wwtp_discharge_rule,
        double demand_buffer, const vector<int> &rof_infra_construction_order,
        const vector<int> &demand_infra_construction_order,
        const vector<double> &infra_construction_triggers, double infra_discount_rate,
        const vector<vector<int>>& infra_if_built_remove, double bond_term, double bond_interest_rate,
        int demand_projection_forecast_length,
        int demand_projection_historical_period_to_use,
        int demand_projection_reprojection_frequency);

    /**
      * @brief Constructor (20-parameter) for a Utility object for when there is infrastructure to be built 
      *         (uses a different InfrastructureManager constructor). Also includes a check for empty demand
      *         vectors that the prior constructor does not have.
      *  
      * This constructor sets up a Utility with specified attributes and initializes its parameters and infrastructure manager.
      * Sets up the Utility instance, initializes water demand, pricing, and financial properties, 
      * and integrates infrastructure construction management functionality. It also computes weekly average water prices 
      * and ensures the provided parameters are valid.
      * 
      * FIXME: Unclear where this constructor is used, and how it differs from the other constructor.
      * 
      * @param name The name of the utility.
      * @param id The unique identifier for the utility.
      * @param demands_all_realizations A vector of weekly demand data for all realizations.
      * @param annual_demand_projections A vector of annual demand projections.
      * @param number_of_week_demands The number of weekly demand entries.
      * @param percent_contingency_fund_contribution Percentage contribution to the contingency fund.
      * @param contingency_fund_cap The maximum allowed value of the contingency fund.
      * @param typesMonthlyDemandFraction A reference to a vector of vectors containing monthly demand fractions by water type.
      *         Table of size 12 (months in year) by number of consumer tiers with the fraction of the total demand consumed by each tier in each month of the year. 
      *         The last column must be the fraction of the demand treated as sewage. 
      *         The summation of all number in a row but the last one, therefore, must sum to 1.      
      * @param typesMonthlyWaterPrice A reference to a vector of vectors containing monthly water prices by tier type.
      *         The last column is the price charged for waste water treatment.
      * @param wwtp_discharge_rule The rule governing wastewater treatment plant discharges.
      *         A 53-week-long time series according to which fractions of sewage is discharged in different water sources 
      *         (normally one for each WWTP).
      * @param demand_buffer A buffer for smoothing demand projections.
      * @param rof_infra_construction_order A vector defining the ROF-based construction order for infrastructure.
      * @param demand_infra_construction_order A vector defining the demand-based construction order for infrastructure.
      * @param infra_construction_triggers A vector of construction triggers for infrastructure projects.
      * @param infra_discount_rate The discount rate applied to infrastructure construction costs.
      * @param bond_term The term of infrastructure bonds.
      * @param bond_interest_rate The interest rate for infrastructure bonds.
      * @param demand_projection_forecast_length Length of the forecast period for demand projections (in weeks).
      * @param demand_projection_historical_period_to_use Historical period (in weeks) used for demand projection.
      * @param demand_projection_reprojection_frequency Frequency (in weeks) for updating demand projections.
      * 
      * @throws std::invalid_argument If both construction order vectors are empty.
      * @throws std::invalid_argument If the infrastructure discount rate is less than or equal to zero.
      * 
      * @see Utility::calculateWeeklyAverageWaterPrices for details on the computation of weekly average water prices.
      * @see InfrastructureManager for details on infrastructure construction management.
      */
    Utility(const char *name, int id, vector<vector<double>>& demands_all_realizations, vector<double>& annual_demand_projections,
        int number_of_week_demands, const double percent_contingency_fund_contribution,
        const double contingency_fund_cap,
        const vector<vector<double>> &typesMonthlyDemandFraction,
        const vector<vector<double>> &typesMonthlyWaterPrice, WwtpDischargeRule wwtp_discharge_rule,
        double demand_buffer, const vector<int> &rof_infra_construction_order,
        const vector<int> &demand_infra_construction_order,
        const vector<double> &infra_construction_triggers, double infra_discount_rate, double bond_term,
        double bond_interest_rate,
        int demand_projection_forecast_length,
        int demand_projection_historical_period_to_use,
        int demand_projection_reprojection_frequency);

    /**
      * @brief Copy constructor for the Utility class.
      *
      * This constructor creates a new Utility object by copying the attributes and 
      * state from an existing Utility instance. It ensures that the 
      * infrastructure construction manager is properly reconnected to the new 
      * object's water source vectors. The water_sources vector is cleared after 
      * the copy to avoid duplicate or conflicting resources.
      *
      * @param utility The Utility object to copy.
      */    
    Utility(Utility &utility);
        
    /**
     * @brief Destructor for the Utility class.
     *
     * Cleans up resources associated with the Utility instance. Specifically, 
     * clears the water_sources vector to release any dynamically allocated 
     * water source objects or references.
     */
    ~Utility();

    /**
      * @brief Copy assignment operator for the Utility class.
      *
      * Assigns the state of an existing Utility object to the current instance. 
      * This operator ensures a deep copy of the relevant data, including reinitializing 
      * and clearing resources before copying.
      * 
      * @param utility The Utility object to copy data from.
      * 
      * @return A reference to the current instance (*this) after copying.
      */
    Utility &operator=(const Utility &utility);

    /**
      * @brief Less-than operator for comparing Utility objects based on their IDs.
      *
      * This operator compares the current Utility instance with another Utility object
      * to determine if the ID of the current instance is less than that of the other.
      *
      * @param other A pointer to the other Utility object to compare against.
      * 
      * @return true if the id of the current Utility is less than the id of the 
      *         other Utility. Otherwise, returns false.
      */
    bool operator<(const Utility* other);

    /**
      * @brief Compares the current Utility object with another Utility object using their IDs.
      * 
      * @param other A pointer to another Utility object to compare with.
      * 
      * @return true if the current Utility object's ID is greater than the other Utility object's ID, false otherwise.
      */ 
    bool operator>(const Utility* other);

    /**
      * @brief Compares two Utility objects based on their IDs.
      *  
      * @param a A pointer to the first Utility object.
      * @param b A pointer to the second Utility object.
      * 
      * @return true if the id of the first Utility object is less than the id of the second Utility object, false otherwise.
      */
    static bool compById(Utility *a, Utility *b);

    /**
     * @brief Sets the actual short-term risk of failure.
     * 
     * @param risk_of_failure The actual risk of failure for storage components (max of storage/treatment ROF).
     */
    void setRisk_of_failure(double risk_of_failure);
    
    /**
     * @brief Sets the short-term risk of failure for both storage and treatment components.
     *      
     * @param storage_risk_of_failure The risk of failure for storage components.
     * @param treatment_risk_of_failure The risk of failure for treatment components.
     */
    void setRisk_of_failures(double storage_risk_of_failure, double treatment_risk_of_failure);

    /**
     * @brief Update the total available volume and net stream inflow based on current water sources.
     * 
     * This function recalculates the total available volume, total stored volume, and net stream inflow by iterating
     * over both priority and non-priority draw water sources and updating these values accordingly.
     * 
     * @see getAvailableAllocatedVolume()
     * @see getAllocatedInflow()
     * @see getPrioritySourcePotentialVolume()
     */
    void updateTotalAvailableVolume();

    /**
     * @brief Calculate wastewater releases for a given week and update discharge values.
     * 
     * This function calculates wastewater discharges based on the current week's demand and updates the discharge values
     * for each source in the wwtp_discharge_rule. The demand_offset is accounted for when calculating the discharges.
     * 
     * It iterates over the wastewater treatment plant (WWTP) discharge rules, applying the relevant dependent
     * variables to calculate the discharge for each source and updating the total wastewater discharge.
     * 
     * @param week The week for which the calculation is being performed.
     * @param discharges A pointer to an array where the discharge values for each source will be updated.
     */ 
    void calculateWastewater_releases(int week, double *discharges);

    /**
     * @brief Calculate the demand difference between the current year and the next year.
     * 
     * This function calculates the delta (difference) in demand between the current year and the next year
     * by subtracting the recorded demand for the current year from the projected demand for the next year.
     * This value is used to update water treatment plant (WTP) allocations for the upcoming year.
     * 
     * This function uses annual_demand_projections to retrieve the projected demand for the next year
     * and compares it with the current_year_recorded_demand to compute the change in demand.
     * 
     * @param current_year The index representing the current year.
     * 
     * @return double The delta in demand between the next year's projection and the current year's recorded demand.
     * 
     * @see annual_demand_projections, current_year_recorded_demand
     */ 
    double calculateCurrentToNextYearDemandDelta(int current_year);

    /**
     * @brief Connect a water source to the utility.
     * 
     * This function adds a new water source to the utility's water sources list and updates
     * the infrastructure construction manager accordingly. It also makes the water source online
     * if certain conditions are met, such as having allocated treatment capacity or being an intake.
     * 
     * This function performs checks to ensure that the water source is correctly added to the utility's
     * system, resizing the water_sources vector if necessary to accommodate the new source. It then
     * updates the water source's status in the infrastructure construction manager and adjusts the
     * utility's total capacity metrics.
     * 
     * @param water_source Pointer to the WaterSource object to be added.
     * 
     * @see checkErrorsAddWaterSourceOnline
     * @see infrastructure_construction_manager
     * @see WaterSource
     */ 
    void addWaterSource(WaterSource *water_source);
    
    /**
     * @brief Splits demands across available water sources.
     * 
     * This function allocates the utility's water demand across various water sources based on their
     * available capacity and treatment capabilities, and updates the contingency fund if necessary.
     * It accounts for projections and buffers applied to demand and rebalances demand among sources
     * in case of overallocation.
     * 
     * Demand is allocated so that river intakes and reuse are first used to their capacity before 
     * requesting water from allocations in reservoirs.
     * 
     * @param week The current week number for which the demands are being split.
     * @param demands A 2D vector that stores the demands allocated to each water source for the utility.
     * @param apply_demand_buffer Flag to indicate whether a demand buffer should be applied.
     * @param apply_demand_projection Flag to indicate whether future demand projections should be used.
     * 
     * @return void
     */
    void splitDemands(
            int week, vector<vector<double>> &demands, bool
    apply_demand_buffer = false, bool apply_demand_projection = false);

    /**
     * @brief Checks for errors when adding a water source to the utility.
     * 
     * This function verifies if a water source with the same ID already exists in the utility's
     * water source list. If a duplicate is found, it throws an invalid_argument exception.
     * It helps ensure that each water source added to the utility has a unique ID.
     * @param water_source A pointer to the water source being added to the utility.
     * 
     * @return void
     * 
     * @throws std::invalid_argument If the water source has a duplicate ID in the utility.
     */
    void checkErrorsAddWaterSourceOnline(WaterSource *water_source);

    /**
     * @brief Resets the drought mitigation variables in the utility.
     * 
     * This function resets key variables related to drought mitigation, which include the
     * restricted price, offset rate per volume, and the demand offset. These variables are
     * typically used during drought conditions to manage water allocation and pricing.
     * 
     * @return void
     */ 
    void resetDroughtMitigationVariables();

    /**
     * @brief Issues a bond for the new infrastructure triggered in the utility.
     * 
     * This function issues a bond for a newly triggered infrastructure and adds it to
     * the list of issued bonds if it hasn’t been issued already. It calculates the 
     * net present value (NPV) of the bond at the time of issuance and updates the 
     * infrastructure net present cost.

     * 
     * @param new_infra_triggered (int) The ID of the newly triggered infrastructure.
     *        If the value is NON_INITIALIZED, no bond is issued.
     * @param week (int) The current week of the simulation, used for bond issuance.
     * 
     * @return void
     * @see Bond::issueBond, Bond::getNetPresentValueAtIssuance
     */ 
    void issueBond(int new_infra_triggered, int week);

    /**
     * @brief Calculates average water price from consumer types and respective prices.
     * 
     * This function calculates the weekly average water prices based on monthly 
     * water prices and the demand fraction for each consumer type. It computes 
     * the average monthly water price for each tier of consumers and then 
     * converts it into weekly prices by evenly distributing the monthly price 
     * across the weeks of the month.
     * 
     * @param typesMonthlyDemandFraction (const vector<vector<double>>&) 
     *        A 2D vector containing the demand fraction for each consumer type 
     *        across the months.
     * @param typesMonthlyWaterPrice (const vector<vector<double>>&) 
     *        A 2D vector containing the water prices for each consumer type 
     *        across the months.
     * 
     * @return void
     * 
     * @throws std::invalid_argument if there is a mismatch in the dimensions 
     *         of the input data or other validation errors from priceCalculationErrorChecking.
     * 
     * @see priceCalculationErrorChecking
     */ 
    void calculateWeeklyAverageWaterPrices(
            const vector<vector<double>> &typesMonthlyDemandFraction,
            const vector<vector<double>> &typesMonthlyWaterPrice);

    /**
     * @brief Returns the water price for a specific week.
     * 
     * This function retrieves the weekly average volumetric water price for 
     * the given week from the weekly_average_volumetric_price vector.
     * 
     * FIXME: Can change name to better reflect the function's purpose as a getter
     * 
     * @param week The week number (from 0 to WEEKS_IN_YEAR) for which the water price is requested.
     * 
     * @return double The water price for the specified week.
     * 
     * @throws std::out_of_range if the week parameter is out of bounds (less than 0 or greater 
     *         than WEEKS_IN_YEAR).
     * 
     * @see weekly_average_volumetric_price
     */
    double waterPrice(int week);

    /**
     * @brief Forces the construction of triggered infrastructure and issues the corresponding bonds.
     * 
     * This function initiates the construction of infrastructure that has been triggered 
     * for the specified week. It also ensures that bonds are issued for each triggered 
     * infrastructure project. If the project is part of a sequence, capital costs will 
     * be adjusted accordingly before bond issuance.
     * 
     * NOTE: This function is useful when there is a need to immediately force the construction 
     * of infrastructure regardless of other conditions or timelines.
     * 
     * @param week The week during which infrastructure construction is forced to begin.
     * 
     * @param new_infra_triggered A vector containing the IDs of the newly triggered infrastructure projects.
     * 
     * @return void 
     * 
     * @throws std::out_of_range if any of the elements in new_infra_triggered are invalid 
     *         or do not correspond to existing infrastructure projects.
     * 
     * @see infrastructure_construction_manager
     * @see issueBond
     */
    void forceInfrastructureConstruction(int week, vector<int> new_infra_triggered);

    /**
     * @brief Handles infrastructure construction based on long-term risk of failure and other parameters.
     * 
     * This function calculates whether new infrastructure should be triggered based on the 
     * long-term risk of failure, the current demand series, and the available infrastructure 
     * capacity. If new infrastructure is triggered, it initiates the necessary steps to 
     * issue bonds and update the infrastructure Net Present Value (NPV).
     * 
     * This function is typically used to manage the infrastructure expansion process 
     * when the utility faces increased risk or demand that necessitates additional capacity.
     * 
     * @param long_term_rof The long-term risk of failure, influencing infrastructure construction decisions.
     * 
     * @param week The current week number in the simulation or process.
     * 
     * @return int The ID of the newly triggered infrastructure project. 
     * Returns NON_INITIALIZED if no new infrastructure was triggered.
     * 
     * @throws std::invalid_argument if long_term_rof or week are outside expected ranges or invalid.
     * 
     * @see infrastructure_construction_manager
     * @see issueBond
     */ 
    int infrastructureConstructionHandler(double long_term_rof, int week);

    /**
     * @brief Checks for errors in the monthly demand fraction and water price data.
     * 
     * This function verifies that the given monthly demand fractions and water prices 
     * meet the expected format and size. It checks that there are exactly 12 months' 
     * worth of data and that the number of tiers (e.g., consumer types) matches across 
     * the demand fractions and water prices. If any of the checks fail, it throws an 
     * invalid_argument exception with a descriptive message.
     * 
     * This function is used before performing price calculations to ensure the 
     * integrity and correctness of the data.
     * 
     * @param typesMonthlyDemandFraction A 2D vector where each row represents a month, 
     * and each column represents the demand fraction for a different consumer tier.
     * 
     * @param typesMonthlyWaterPrice A 2D vector where each row represents a month, 
     * and each column represents the water price for a different consumer tier.
     * 
     * @return void
     * @throws std::invalid_argument if the number of months is not equal to 12 or if 
     *         the dimensions of the demand fractions and water prices do not match.
     * 
     * @see Utility::calculateWeeklyAverageWaterPrices
     */ 
    void priceCalculationErrorChecking(
            const vector<vector<double>> &typesMonthlyDemandFraction,
            const vector<vector<double>> &typesMonthlyWaterPrice);

    /**
     * @brief Updates the utility's contingency fund and debt service based on the current demand and water prices.
     * 
     * This function calculates and updates the contingency fund, gross revenue, revenue losses due to restrictions, 
     * and the debt service for the utility. It takes into account factors such as unrestricted and restricted demand, 
     * the current water price, and any unfulfilled demand. It also updates variables related to drought mitigation costs 
     * and fund contributions.
     * 
     * This function works for both sources and receivers of transfers, and the transfer water prices are different than regular 
     * prices for both sources and receivers. It also stores the cost of drought mitigation.
     * 
     * @param unrestricted_demand
     *        The total demand for water without any restrictions applied.
     * @param demand_multiplier
     *        The multiplier applied to demand to reflect adjustments such as restrictions.
     * @param demand_offset
     *        The offset to be applied to demand, typically due to transfer agreements or other adjustments.
     * @param unfulfilled_demand
     *        The amount of demand that could not be fulfilled due to limitations on supply.
     * @param week
     *        The current week of the year for which the update is being performed.
     * 
     * @return void
     * 
     * @throws logic_error
     *         If the restricted price is lower than the unrestricted price, which is invalid.
     * 
     * @see Utility::updateDebtPayment
     * @see Utility::calculateRevenueLosses
     */
    void updateContingencyFundAndDebtService(
            double unrestricted_demand, double demand_multiplier,
            double demand_offset, double unfulfilled_demand, int week);

    /**
     * @brief Retrieves the total storage capacity of the utility.
     * 
     * This function returns the total storage capacity available to the utility. It 
     * is used to get the total volume of water that the utility can store.
     * @return double The total storage capacity of the utility.
     * 
     * @see Utility::setTotalStorageCapacity
     */ 
    double getTotal_storage_capacity() const;

    /**
     * @brief Retrieves the short-term risk of failure for the utility.
     * 
     * This function returns the short-term risk of failure value for the utility. 
     * It provides an indicator of the risk level for the utility's operations in 
     * the near future, helping in decision-making and planning for infrastructure 
     * improvements or other mitigative actions.
     * 
     * @return double The short-term risk of failure of the utility.
     * 
     * @see Utility::setRisk_of_failure
     */
    double getRisk_of_failure() const;

    /**
     * @brief Retrieves the ratio of stored volume to total storage capacity.
     * 
     * This function calculates and returns the ratio of the total stored volume 
     * to the total storage capacity of the utility. It provides a measure of how 
     * efficiently the utility is utilizing its storage capacity, indicating whether 
     * the storage is under-utilized or nearing full capacity.
     * 
     * @return double The ratio of stored volume to total storage capacity.
     * 
     * @see Utility::getTotal_storage_capacity, Utility::getTotal_stored_volume
     */
    double getStorageToCapacityRatio() const;
    
    /**
      * @brief Retrieves the gross revenue of the utility.
      * 
      * This function returns the current gross revenue of the utility. Gross revenue 
      * refers to the total revenue generated before any expenses or deductions, such 
      * as operational costs or taxes, are subtracted.
      * 
      * @return double The current gross revenue of the utility.
      * 
      * @see Utility::setGrossRevenue
      * @see Utility::calculateGrossRevenue
      */ 
    double getGrossRevenue() const;

    /**
     * @brief Sets the demand multiplier for the utility.
     * 
     * This function sets the multiplier for the utility's demand calculations. The 
     * demand multiplier is used to adjust the demand for the utility based on various 
     * factors, such as changes in demand patterns, growth projections, or other external 
     * factors that may affect water consumption.
     * 
     * @param demand_multiplier The value to set as the demand multiplier.
     * It should be a positive value that adjusts the demand calculations for the utility.
     * 
     * @return void
     * 
     * @see Utility::getDemand_multiplier
     * @see Utility::calculateDemandWithMultiplier
     */
    void setDemand_multiplier(double demand_multiplier);

    /**
     * @brief Sets the demand offset and the offset rate per volume for the utility.
     * 
     * This function updates the demand offset by adding the specified value to the current 
     * demand offset, allowing for multiple transfer agreements to accumulate. Additionally, 
     * it sets the offset rate per volume, which is used to adjust the demand calculations 
     * based on the volume of water allocated or transferred.
     * 
     * @param demand_offset The amount by which to adjust the utility's demand offset. This value will 
     *        be added to the current demand offset.
     * @param offset_rate_per_volume The rate at which the demand offset adjusts based on the volume of water.
     * 
     * @return void
     * 
     * @see Utility::getDemand_offset
     * @see Utility::calculateAdjustedDemand
     */
    void setDemand_offset(double demand_offset, double offset_rate_per_volume);

    /**
     * @brief Returns the total treatment capacity of the utility.
     * 
     * This function provides the total treatment capacity available to the utility,
     * which is the capacity to treat water for distribution or other uses. The total 
     * treatment capacity is crucial for calculating the utility’s ability to process 
     * incoming water and meet demand, especially in cases of varying or increasing water 
     * demand.
     * 
     * @return double The total treatment capacity of the utility.
     * 
     * @see Utility::getTotal_storage_capacity
     * @see Utility::calculateWaterTreatmentNeeds
     */
    double getTotal_treatment_capacity() const;

    /**
     * @brief Sets a specified water source as online for the utility.
     * 
     * This function triggers the transition of a water source from offline to online status, updating the utility's 
     * infrastructure to reflect the new capacity and availability of the water source. The change is reflected in the 
     * utility's storage and treatment capacities, as well as the available and stored volumes.
     * 
     * @param source_id
     *        The unique identifier of the water source to be set online.
     * @param week
     *        The current week of the year, used to manage construction timelines and updates.
     * 
     * @return void
     * 
     * @see InfrastructureConstructionManager::setWaterSourceOnline
     */
    void setWaterSourceOnline(unsigned int source_id, int week);

    /**
     * @brief Updates the current debt payment for the utility for a specific week, 
     * if that's the first week of the year.
     * 
     * This function calculates the current debt payment that the utility owes based on the bonds it has issued. 
     * It checks if any bonds are variable debt service bonds (associated with variable joint water treatment projects), 
     * and adjusts the debt service accordingly. It also sums up the debt service for all issued bonds and returns 
     * the total debt payment for the given week.
     * 
     * @param week
     *        The current week of the year, used to calculate the applicable debt service for that week.
     * 
     * @return
     *        double The total current debt payment for the utility for the specified week.
     * 
     * @throws none
     * 
     * @see Bond::setDebtService
     * @see Bond::getDebtService
     */ 
    double updateCurrent_debt_payment(int week);

    /**
     * @brief Retrieves the current contingency fund balance.
     * 
     * This function returns the current balance of the utility's contingency fund, 
     * which is used to cover unexpected costs such as water shortages, transfer costs, 
     * or other financial needs related to utility operations.
     * 
     * @return double The current contingency fund balance.
     */
    double getContingency_fund() const;

    /**
     * @brief Retrieves the unrestricted demand for the utility.
     * 
     * This function returns the unrestricted demand, which is the total water demand 
     * without any restrictions or adjustments applied. This value represents the 
     * demand that the utility would expect if there were no supply limitations.
     * 
     * @return double The current unrestricted demand value.
     */
    double getUnrestrictedDemand() const;

    /**
     * @brief Retrieves the restricted demand for the utility.
     * 
     * This function returns the restricted demand, which is the total water demand 
     * after restrictions or adjustments, such as limitations in water supply or 
     * surcharges, have been applied. This value represents the demand that the 
     * utility expects under restricted conditions.
     * 
     * @return double The current restricted demand value.
     */
    double getRestrictedDemand() const;

    /**
     * @brief Sets the restricted price for the utility.
     * 
     * This function sets the restricted price, which is the water price applied 
     * when restrictions are enacted (e.g., during a drought or water usage 
     * limitations). This price may differ from the unrestricted price and is used 
     * when the utility enforces supply constraints.
     * 
     * @param restricted_price
     *        The new restricted price value to be set for the utility.
     * 
     * @return void
     */
    void setRestricted_price(double restricted_price);

    /**
     * @brief Gets the demand multiplier for the utility.
     * 
     * This function returns the current demand multiplier, which is a factor that 
     * adjusts the demand calculations for the utility. It may be used to simulate 
     * changes in water consumption patterns, such as demand increases or decreases 
     * due to pricing, conservation efforts, or other factors.
     * 
     * @return double The current demand multiplier.
     */
    double getDemand_multiplier() const;

    /**
     * @brief Gets the unrestricted demand for the utility at a specific week.
     * 
     * This function returns the unrestricted demand for the utility in a given 
     * week. Unrestricted demand is the total demand for water without any 
     * restrictions or adjustments such as demand offset or restriction due to 
     * droughts or other operational limitations. 
     * 
     * @param week
     *        The week for which the unrestricted demand is being queried.
     * 
     * @return double The unrestricted demand value for the specified week.
     * 
     * @throws std::out_of_range
     *        If the provided week is outside the valid range of the demand series.
     */
    double getUnrestrictedDemand(int week) const;

    /**
     * @brief Gets the net present cost of infrastructure for the utility.
     * 
     * This function returns the current net present value (NPV) of the infrastructure 
     * for the utility. The net present cost represents the total cost of the infrastructure 
     * investments, accounting for both construction and operational costs, discounted 
     * over time.
     * 
     * @return double The net present cost of the utility's infrastructure.
     */
    double getInfrastructure_net_present_cost() const;

    /**
     * @brief Gets the current debt payment for the utility.
     * 
     * This function returns the current debt payment that the utility must make for its
     * outstanding bonds. The debt payment is calculated based on the terms of the issued bonds
     * and is used to manage the utility's financial obligations.
     * 
     * @return double The current debt payment for the utility.
     */
    double getCurrent_debt_payment() const;

    /**
     * @brief Gets the current contribution to the contingency fund.
     * 
     * This function returns the current contribution made to the utility's contingency fund.
     * The fund contribution is calculated based on various factors such as revenue losses,
     * transfer costs, and other operational variables that affect the financial health of the utility.
     * 
     * @return double The current contribution to the contingency fund.
     */
    double getCurrent_contingency_fund_contribution() const;

    /**
     * @brief Gets the current cost for drought mitigation.
     * 
     * This function returns the current cost for drought mitigation efforts,
     * which are calculated based on factors like revenue losses, transfer costs,
     * insurance payouts, and other variables affecting the utility's drought response.
     * 
     * @return double The current drought mitigation cost.
     */
    double getDrought_mitigation_cost() const;

    /**
     * @brief Adds an insurance payout to the contingency fund.
     * 
     * This function increases the contingency fund by the specified payout value
     * and records the insurance payout. The payout value is added directly to the
     * fund and also stored for future reference.
     * 
     * @param payout_value The amount of the insurance payout to be added to the contingency fund.
     * 
     * @return void
     */
    void addInsurancePayout(double payout_value);

    /**
     * @brief Clears all water sources associated with the utility.
     * 
     * This function removes all entries from the water_sources container, effectively
     * disassociating all water sources from the utility. This operation will clear any
     * stored references to water sources and reset the state of the utility with regard to
     * water source management.
     * 
     * @return void
     */
    void clearWaterSources();

    /**
     * @brief Purchases insurance by deducting from the contingency fund.
     * 
     * This function reduces the contingency_fund by the specified insurance_price
     * and records the insurance purchase amount. It is used to simulate the purchase
     * of insurance, typically for risk mitigation or disaster recovery purposes.
     * 
     * @param insurance_price The cost of the insurance to be purchased.
     * 
     * @return void
     */
    void purchaseInsurance(double insurance_price);

    /**
     * @brief Retrieves the insurance payout value.
     * 
     * This function returns the amount of insurance payout that has been recorded.
     * It can be used to check how much insurance the utility has received, typically
     * as a result of an event triggering an insurance claim.
     * 
     * @return double The amount of the insurance payout.
     */
    double getInsurance_payout() const;

    /**
     * @brief Retrieves the insurance purchase value.
     * 
     * This function returns the amount of insurance purchased by the utility.
     * It can be used to check the total cost of insurance purchased by the utility,
     * typically used for mitigating financial risk due to adverse events.
     * 
     * @return double The amount of insurance purchased.
     */
    double getInsurance_purchase() const;

    /**
   * @brief Retrieves the order of infrastructure construction based on risk of failure (ROF).
   * 
   * This function returns a reference to a vector containing the order in which infrastructure
   * should be constructed based on the risk of failure. The infrastructure construction order
   * is determined by evaluating the ROF of different infrastructure elements, which informs 
   * the prioritization for construction.
   * 
   * @return A constant vector<int> reference to a vector of integers representing the infrastructure construction order.
   * 
   * @see infrastructure_construction_manager
   */
    const vector<int> &getRof_infrastructure_construction_order() const;

    /**
     * @brief Sets the realization factors for the utility and adjusts demand series.
     * Eliminates reference to comprehensive demand data set.
     * 
     * This function adjusts the utility's demand series based on the provided realization 
     * factors, which are applied to the demands for the current realization. It also adjusts 
     * bond-related parameters, infrastructure discount rates, and other factors that influence 
     * the utility's operations.
     * 
     * @param r The index of the realization (from the set of all realizations).
     * @param rdm_factors A vector containing realization factors:
     *   - rdm_factors[0] is the demand factor applied to the demand series.
     *   - rdm_factors[1] is the multiplier for the bond term.
     *   - rdm_factors[2] is the multiplier for the bond interest rate.
     *   - rdm_factors[3] is the multiplier for the infrastructure discount rate.
     * 
     * @return void
     * 
     * @see calculateWeeklyPeakingFactor
     * @see calculateAnnualAverageWeeklyDemand
     * @see demands_all_realizations
     */
    void setRealization(unsigned long r, vector<double>& rdm_factors);

    /**
     * @brief Retrieves the infrastructure that was built in the last week.
     * 
     * This function returns a list of the infrastructure items that were completed 
     * during the most recent week, as tracked by the infrastructure construction manager.
     * 
     * @return A constant reference to a vector of integers representing the IDs of the 
     *         infrastructure items that were completed in the last week.
     * 
     * @see infrastructure_construction_manager.getInfra_built_last_week
     */
    const vector<int> getInfrastructure_built() const;

    /**
     * @brief Disables financial calculations for the utility.
     * 
     * This function sets the used_for_realization flag to false, indicating that 
     * financial calculations should not be performed for the utility in the current 
     * context or iteration.
     * 
     * FIXME: Fix name to setNoFinancialCalculations
     * 
     * @return void
     */
    void setNoFinaicalCalculations();

    /**
     * @brief Gets the actual long-term risk of failure (max of storage/treatment ROF).
     * 
     * @param risk_of_failure The max risk of failure between storage/treatment ROFs.
     * 
     * @return double The long-term risk of failure.
     */
    double getLong_term_risk_of_failure() const;

    /**
     * @brief Retrieves the demand-based infrastructure construction order.
     * 
     * This function returns the order in which infrastructure should be constructed, 
     * based on the demand requirements for the utility. It helps in prioritizing 
     * construction efforts according to demand.
     * 
     * @return const vector<int>& A constant reference to the vector representing the 
     *         infrastructure construction order based on demand.
     */ 
    const vector<int> &getDemand_infra_construction_order() const;

    /**
     * @brief Calculates the weekly peaking factor for demand.
     * 
     * This function calculates the peaking factor for each week over multiple years 
     * based on the demand data. The factor is determined by comparing each week's 
     * demand to the average demand of the corresponding year, and then averaging 
     * over all years.
     * 
     * @param demands A pointer to a vector containing demand values over multiple years.
     * 
     * @return vector<double> A vector of weekly peaking factors.
     */
    vector<double> calculateWeeklyPeakingFactor(vector<double> *demands);

    /**
     * @brief Returns the list of water sources associated with the utility.
     * 
     * This function provides access to the collection of water sources that are 
     * currently associated with the utility. The list is returned as a constant 
     * reference to ensure that the original list is not modified.
     * 
     * @return const vector<WaterSource *> & A constant reference to a vector 
     * containing the water sources.
     */
    const vector<WaterSource *> &getWater_sources() const;

    /**
     * @brief Returns the amount of waste water discharge for the utility.
     * 
     * This function retrieves the current waste water discharge value associated 
     * with the utility. The value represents the amount of waste water being 
     * discharged by the utility, typically measured in a specified unit such as 
     * cubic meters or gallons.
     * 
     * @return double The amount of waste water discharge.
     */
    double getWaste_water_discharge() const;

    /**
     * @brief Returns the total available volume of the utility.
     * 
     * This function retrieves the total available volume of water that the utility
     * has access to. The value represents the quantity of water available for 
     * distribution, typically measured in cubic meters or gallons.
     * 
     * @return double The total available volume of water.
     */
    double getTotal_available_volume() const;

    /**
     * @brief Resets the total storage capacity of the utility.
     * 
     * This function sets the total storage capacity of the utility to 0, essentially
     * clearing the current storage capacity value. This may be used in cases where
     * the storage capacity needs to be recalculated or reset due to changes in infrastructure
     * or other conditions.
     * 
     * @return void
     */
    void resetTotal_storage_capacity();

    /**
     * @brief Returns the unfulfilled demand of the utility.
     * 
     * This function calculates and returns the amount of demand that cannot be fulfilled
     * by the available resources, based on the restricted demand and the total available
     * volume or treatment capacity. The unfulfilled demand is the excess demand that exceeds
     * the utility's resources, if any.
     * 
     * @return double The unfulfilled demand value.
     */
    double getUnfulfilled_demand() const;

    /**
     * @brief Returns the net stream inflow of the utility.
     * 
     * This function retrieves the net stream inflow value, representing the amount of water
     * entering the utility's system from stream sources. The net stream inflow accounts for
     * the total inflow minus any outflow, providing a measure of the system's incoming water
     * volume.
     * 
     * @return double The net stream inflow value.
     */
    double getNet_stream_inflow() const;

    /**
     * @brief Returns the total stored volume of water in the utility's system.
     * 
     * This function retrieves the total volume of water that has been stored within the utility's
     * storage facilities. The stored volume is an important measure for understanding the utility's
     * capacity to manage and supply water, especially in relation to demand and available volume.
     * 
     * @return double The total stored volume of water.
     */
    double getTotal_stored_volume() const;

    /**
     * @brief Returns the infrastructure construction manager for the utility.
     * 
     * This function provides access to the infrastructure construction manager, which handles the
     * planning and management of infrastructure construction within the utility. This manager is
     * responsible for managing the development of new infrastructure projects, including water sources,
     * storage, and treatment facilities.
     * 
     * @return const InfrastructureManager& The infrastructure construction manager.
     * 
     * @see setInfrastructure_construction_manager
     */
    const InfrastructureManager &getInfrastructure_construction_manager() const;

    /**
     * @brief Returns the current demand offset for the utility.
     * 
     * This function retrieves the value of the demand offset, which represents any adjustments made to
     * the utility's demand due to factors such as policy or agreements. It is used in calculating the
     * utility's total demand and pricing strategies.
     * 
     * @return double The current demand offset.
     */
    double getDemand_offset() const;

    /**
     * @brief Returns the ratio of available volume to total storage capacity.
     * 
     * This function calculates the ratio of the current available volume (the volume of water that can
     * still be utilized or stored) to the total storage capacity of the utility. This ratio provides an
     * indication of how much capacity is currently available compared to the total storage potential.
     * 
     * @return double The ratio of available volume to total storage capacity.
     */
    double getAvailableVolumeToCapacityRatio() const;

    /**
     * @brief Returns the ratio of unrestricted demand to total treatment capacity.
     * 
     * This function calculates the ratio of the current unrestricted demand to the total treatment capacity
     * of the utility. The ratio helps to assess whether the current demand can be handled by the available
     * treatment capacity.
     * 
     * @return double The ratio of unrestricted demand to total treatment capacity.
     */
    double getUnrestrictedDemandToTreatmentCapacityRatio() const;

    /**
     * @brief Sets the long-term risk of failure for storage and treatment.
     * 
     * This function sets the long-term risk of failure for both the storage and treatment components
     * of the utility. It allows the user to define the risk of failure for each aspect, which is used in
     * subsequent calculations related to infrastructure planning and management.
     * 
     * @param storage_risk_of_failure The long-term risk of failure for storage, as a percentage.
     * @param treatment_risk_of_failure The long-term risk of failure for treatment, as a percentage.
     * 
     * @return void
     */
    void setLongTermRisk_of_failures(double storage_risk_of_failure, double treatment_risk_of_failure);

    /**
     * @brief Retrieves the long-term storage risk of failure.
     * 
     * This function returns the long-term risk of failure for the storage component of the utility,
     * which is set using the setLongTermRisk_of_failures function. This value is used in risk management
     * and infrastructure planning calculations.
     * 
     * @return double The long-term storage risk of failure as a percentage.
     */
    double getLong_term_storage_risk_of_failure() const;

    /**
     * @brief Retrieves the long-term treatment risk of failure.
     * 
     * This function returns the long-term risk of failure for the treatment component of the utility,
     * which is set using the setLongTermRisk_of_failures function. This value is used in risk management
     * and infrastructure planning calculations.
     * 
     * @return double The long-term treatment risk of failure as a percentage.
     */
    double getLong_term_treatment_risk_of_failure() const;

    /**
     * @brief Calculates the estimated future demand based on projections and historical data.
     * 
     * This function is used in ltROF calculations to estimate the demand for 5 years ahead on the utility's historical demand data and
     * the projected demand. The demand is reprojected by calculating the average annual growth rate over the last few years
     * if at least 5 years or prior data is available. To be used along with demand buffer.
     * 
     * The demand projection is updated if the re-projection conditions are met.
     * 
     * @param week The current week in the simulation.
     * @param reproject_demand A flag indicating whether the demand should be reprojected.
     * 
     * @return void
     * 
     * @throws logic_error if the forecast length exceeds the available projection data.
     * 
     * @see annual_demand_projections, demand_projection_forecast_length, setDemand_projection_parameters
     */
    void calculateDemandEstimateFromProjection(int year, bool reproject_demand);

    /**
     * @brief Gets the recorded demand for the current year.
     * 
     * This function returns the actual demand recorded for the current year, which is used
     * for demand projections and calculations. The value is updated at the end of each year.
     * 
     * @return The recorded demand for the current year.
     */
    double getCurrent_year_demand_record() const;

    /**
     * @brief Gets the estimated future demand.
     * 
     * This function returns the projected demand for a future year, calculated based on
     * historical demand growth rates or pre-defined projections. It is used for long-term risk
     * of failure (LTROF) calculations and planning.
     * 
     * @return The estimated demand for a future year.
     */
    double getFuture_demand_estimate() const;

    /**
     * @brief Sets the estimated future demand.
     * 
     * This function sets the projected demand for a future year. The demand estimate is typically 
     * used in long-term planning and risk calculations.
     * 
     * @param demand_estimate The projected demand for a future year.
     * 
     * @return void
     */
    void setFuture_demand_estimate(double demand_estimate);

    /**
     * @brief Sets the recorded demand for the current year.
     * 
     * This function records the actual demand for the current year, which is used in various 
     * projections and calculations, such as estimating future demand and calculating growth rates.
     * 
     * @param current_demand The actual demand recorded for the current year.
     * 
     * @return void
     */
    void setCurrent_year_demand_record(double current_demand);

    /**
     * @brief Calculates the annual average weekly demand for each year.
     * 
     * This function computes the average weekly demand for each year based on the input
     * demand series. It assumes the demand data is provided for each week of the year, and
     * calculates the annual average by dividing the total demand for each year by the number
     * of weeks in the year.
     * 
     * @param demands A pointer to a vector of weekly demand values. The size of this vector 
     *                should be a multiple of the number of weeks in a year (WEEKS_IN_YEAR).
     * 
     * @return vector<double> A vector containing the average weekly demand for each year.
     */
    vector<double> calculateAnnualAverageWeeklyDemand(vector<double> *demands);

    /**
     * @brief This function calculates the annual average weekly demand for a given set of demand data.
     *
     * @param demands A pointer to a vector containing weekly demand values.
     * @return A vector containing the annual average weekly demand for each year.
     *
     * @throws No exceptions are thrown in this function.
     */
    void updateTreatmentCapacity(double capacity_adjustment);

    /**
     * @brief This function sets the total treatment capacity for the utility.
     *
     * @param total_capacity The total treatment capacity to be set.
     * 
     * @return void
     */
    void setTreatmentCapacity(double total_capacity);

    /**
     * @brief Updates the present value of the debt payment for the current week.
     * 
     * This function calculates the total present value of the debt payments to be made in a week 
     * for each bond issued by the utility (if that's the first week of the year),
     * considering any changes in debt service allocation over the course of the repayment. 
     * It sums the present value of debt payments for all bonds and returns the total amount.
     * 
     * @param week The current week for which the present value of debt service is calculated.
     * @return double The total present value of the debt payment for the given week.
     * @throws None
     * @see Bond::getPresentValueDebtService()
     */
    double updateCurrent_present_value_debt_payment(int week);

    /**
     * @brief Retrieves the current present-valued debt payment.
     * 
     * This function returns the present-valued debt payment for the current week as calculated by
     * the updateCurrent_present_value_debt_payment function.
     * 
     * @return double The current present-valued debt payment.
     */
    double getCurrent_debt_payment_present_valued() const;

    /**
     * @brief Retrieves the short-term storage risk of failure.
     * 
     * This function returns the short-term storage risk of failure, which is a value that indicates
     * the likelihood of failure in the storage capacity over a short period.
     * 
     * @return double The short-term storage risk of failure.
     */
    double getStorageRisk_of_failure() const;

    /**
     * @brief Retrieves the short-term treatment risk of failure.
     * 
     * This function returns the short-term treatment risk of failure, which is a value that indicates
     * the likelihood of failure in the treatment capacity over a short period.
     * 
     * @return double The short-term treatment risk of failure.
     */
    double getTreatmentRisk_of_failure() const;

    /**
     * @brief Calculates the sinusoidal factor based on the given parameters.
     * 
     * This function computes a sinusoidal factor for a given week, where the output is
     * influenced by amplitude (A), period (T), and phase (p). It is typically used in scenarios 
     * where a periodic fluctuation is modeled.
     * 
     * @param week The current week for which the sinusoidal factor is calculated.
     * @param A The amplitude of the sinusoidal fluctuation.
     * @param T The period of the fluctuation (in weeks).
     * @param p The phase shift of the sinusoidal function.
     * 
     * @return double The computed sinusoidal factor.
     */
    double getSinusoidalFactor(int week, double A, double T, double p);

};


#endif //TRIANGLEMODEL_UTILITY_H
